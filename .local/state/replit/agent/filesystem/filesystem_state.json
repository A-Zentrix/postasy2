{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_wtf.csrf import CSRFProtect\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\ncsrf = CSRFProtect()\n\ndef create_app():\n    app = Flask(__name__)\n    \n    # Configuration\n    app.secret_key = os.environ.get(\"SESSION_SECRET\")\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n    \n    # Database configuration\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\", \"sqlite:///posterly.db\")\n    app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n    }\n    app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n    \n    # Upload configuration\n    app.config[\"UPLOAD_FOLDER\"] = \"static/uploads\"\n    app.config[\"MAX_CONTENT_LENGTH\"] = 16 * 1024 * 1024  # 16MB max file size\n    \n    # Initialize extensions\n    db.init_app(app)\n    login_manager.init_app(app)\n    # Temporarily disable CSRF for testing\n    # csrf.init_app(app)\n    \n    # Login manager configuration\n    login_manager.login_view = 'auth.login'\n    login_manager.login_message = 'Please log in to access this page.'\n    login_manager.login_message_category = 'info'\n    \n    @login_manager.user_loader\n    def load_user(user_id):\n        from models import User\n        return User.query.get(int(user_id))\n    \n    # Create upload directories\n    upload_dirs = [\n        'static/uploads',\n        'static/uploads/posters', \n        'static/uploads/logos'\n    ]\n    for directory in upload_dirs:\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create tables and register blueprints\n    with app.app_context():\n        import models\n        db.create_all()\n        \n        # Register blueprints\n        from routes import main_bp, auth_bp, poster_bp, profile_bp, subscription_bp, payment_bp\n        app.register_blueprint(main_bp)\n        app.register_blueprint(auth_bp, url_prefix='/auth')\n        app.register_blueprint(poster_bp, url_prefix='/poster')\n        app.register_blueprint(profile_bp, url_prefix='/profile')\n        app.register_blueprint(subscription_bp, url_prefix='/subscription')\n        app.register_blueprint(payment_bp)\n    \n    return app\n\napp = create_app()\n","size_bytes":2480},"asgi.py":{"content":"\"\"\"\nASGI entry point for FastAPI application\nThis file provides the ASGI application for deployment with uvicorn or gunicorn with uvicorn workers\n\"\"\"\n\nfrom simple_fastapi import app\n\n# Export the FastAPI app for ASGI servers\napplication = app\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"asgi:application\", host=\"0.0.0.0\", port=5000, reload=True)","size_bytes":365},"fastapi_app.py":{"content":"import os\nimport logging\nfrom fastapi import FastAPI, Depends, HTTPException, Request, Form, File, UploadFile, status\nfrom fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy import create_engine, desc\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom typing import Optional, List\nimport uvicorn\nfrom datetime import datetime, timedelta\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nimport json\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Import models and services\nfrom models_fastapi import User, Poster, Subscription, Base\nfrom gemini_service import generate_poster_image, validate_prompt\nfrom image_service import add_watermark, add_profile_overlay, save_uploaded_file, generate_filename\nfrom stripe_service_fastapi import create_checkout_session, create_customer_portal_session, handle_webhook\n\n# FastAPI app initialization\napp = FastAPI(title=\"Posterly\", description=\"AI-powered poster generator\")\n\n# Static files and templates\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\n# Database setup\nDATABASE_URL = os.environ.get(\"DATABASE_URL\", \"sqlite:///posterly.db\")\nengine = create_engine(DATABASE_URL, pool_pre_ping=True, pool_recycle=300)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Create tables\nBase.metadata.create_all(bind=engine)\n\n# Security setup\nSECRET_KEY = os.environ.get(\"SESSION_SECRET\", \"your-secret-key-here\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nsecurity = HTTPBearer(auto_error=False)\n\n# Upload configuration\nUPLOAD_FOLDER = \"static/uploads\"\nMAX_FILE_SIZE = 16 * 1024 * 1024  # 16MB\n\n# Create upload directories\nupload_dirs = [\n    'static/uploads',\n    'static/uploads/posters', \n    'static/uploads/logos'\n]\nfor directory in upload_dirs:\n    os.makedirs(directory, exist_ok=True)\n\n# Database dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# Password utilities\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n# JWT token utilities\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef get_current_user(request: Request, db: Session = Depends(get_db), credentials: HTTPAuthorizationCredentials = Depends(security)):\n    \"\"\"Get current user from JWT token in Authorization header or session cookie\"\"\"\n    token = None\n    \n    # Try to get token from Authorization header\n    if credentials:\n        token = credentials.credentials\n    else:\n        # Try to get token from session cookie\n        token = request.cookies.get(\"access_token\")\n    \n    if not token:\n        return None\n    \n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: int = payload.get(\"sub\")\n        if user_id is None:\n            return None\n    except JWTError:\n        return None\n    \n    user = db.query(User).filter(User.id == user_id).first()\n    return user\n\ndef get_current_user_required(current_user: User = Depends(get_current_user)):\n    \"\"\"Require authentication - raises HTTPException if not authenticated\"\"\"\n    if current_user is None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Not authenticated\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return current_user\n\n# Authentication functions\ndef authenticate_user(db: Session, username: str, password: str):\n    user = db.query(User).filter(User.username == username).first()\n    if not user:\n        return False\n    if not verify_password(password, user.password_hash):\n        return False\n    return user\n\n# Routes\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index(request: Request, current_user: User = Depends(get_current_user)):\n    if current_user:\n        return RedirectResponse(url=\"/dashboard\", status_code=302)\n    return templates.TemplateResponse(\"index.html\", {\"request\": request})\n\n@app.get(\"/dashboard\", response_class=HTMLResponse)\nasync def dashboard(request: Request, current_user: User = Depends(get_current_user_required), db: Session = Depends(get_db)):\n    if not current_user.profile_completed:\n        return RedirectResponse(url=\"/profile/setup?message=Please complete your profile to start generating posters.\", status_code=302)\n    \n    # Get user's recent posters\n    recent_posters = db.query(Poster).filter(Poster.user_id == current_user.id)\\\n                                     .order_by(desc(Poster.created_at))\\\n                                     .limit(6).all()\n    \n    return templates.TemplateResponse(\"dashboard.html\", {\n        \"request\": request, \n        \"current_user\": current_user,\n        \"recent_posters\": recent_posters\n    })\n\n@app.get(\"/login\", response_class=HTMLResponse)\nasync def login_get(request: Request, current_user: User = Depends(get_current_user)):\n    if current_user:\n        return RedirectResponse(url=\"/dashboard\", status_code=302)\n    \n    message = request.query_params.get(\"message\")\n    return templates.TemplateResponse(\"login.html\", {\"request\": request, \"message\": message})\n\n@app.post(\"/login\")\nasync def login_post(\n    request: Request,\n    username: str = Form(...),\n    password: str = Form(...),\n    remember_me: bool = Form(False),\n    db: Session = Depends(get_db)\n):\n    user = authenticate_user(db, username, password)\n    if not user:\n        return templates.TemplateResponse(\"login.html\", {\n            \"request\": request,\n            \"error\": \"Invalid username or password\"\n        })\n    \n    # Create access token\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES if not remember_me else 43200)  # 30 days if remember_me\n    access_token = create_access_token(\n        data={\"sub\": str(user.id)}, expires_delta=access_token_expires\n    )\n    \n    # Redirect to dashboard\n    response = RedirectResponse(url=\"/dashboard\", status_code=302)\n    response.set_cookie(\n        key=\"access_token\",\n        value=access_token,\n        max_age=1800 if not remember_me else 2592000,  # 30 min or 30 days\n        httponly=True,\n        secure=True,\n        samesite=\"lax\"\n    )\n    return response\n\n@app.get(\"/register\", response_class=HTMLResponse)\nasync def register_get(request: Request, current_user: User = Depends(get_current_user)):\n    if current_user:\n        return RedirectResponse(url=\"/dashboard\", status_code=302)\n    return templates.TemplateResponse(\"register.html\", {\"request\": request})\n\n@app.post(\"/register\")\nasync def register_post(\n    request: Request,\n    username: str = Form(...),\n    email: str = Form(...),\n    password: str = Form(...),\n    password2: str = Form(...),\n    db: Session = Depends(get_db)\n):\n    errors = []\n    \n    # Validation\n    if password != password2:\n        errors.append(\"Passwords do not match\")\n    \n    if len(password) < 6:\n        errors.append(\"Password must be at least 6 characters long\")\n    \n    if db.query(User).filter(User.username == username).first():\n        errors.append(\"Username already exists\")\n    \n    if db.query(User).filter(User.email == email).first():\n        errors.append(\"Email already registered\")\n    \n    if errors:\n        return templates.TemplateResponse(\"register.html\", {\n            \"request\": request,\n            \"errors\": errors,\n            \"username\": username,\n            \"email\": email\n        })\n    \n    # Create new user\n    hashed_password = get_password_hash(password)\n    new_user = User(\n        username=username,\n        email=email,\n        password_hash=hashed_password,\n        created_at=datetime.utcnow()\n    )\n    \n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    \n    return RedirectResponse(url=\"/login?message=Registration successful! Please log in.\", status_code=302)\n\n@app.post(\"/logout\")\nasync def logout():\n    response = RedirectResponse(url=\"/\", status_code=302)\n    response.delete_cookie(key=\"access_token\")\n    return response\n\n# Profile routes\n@app.get(\"/profile/setup\", response_class=HTMLResponse)\nasync def profile_setup_get(request: Request, current_user: User = Depends(get_current_user_required)):\n    message = request.query_params.get(\"message\")\n    return templates.TemplateResponse(\"profile_setup.html\", {\n        \"request\": request,\n        \"current_user\": current_user,\n        \"message\": message\n    })\n\n@app.post(\"/profile/setup\")\nasync def profile_setup_post(\n    request: Request,\n    current_user: User = Depends(get_current_user_required),\n    db: Session = Depends(get_db),\n    full_name: str = Form(...),\n    phone: str = Form(None),\n    address: str = Form(None),\n    business_name: str = Form(None),\n    logo: UploadFile = File(None),\n    website: str = Form(None),\n    facebook: str = Form(None),\n    instagram: str = Form(None),\n    twitter: str = Form(None),\n    linkedin: str = Form(None)\n):\n    # Update user profile\n    current_user.full_name = full_name\n    current_user.phone = phone\n    current_user.address = address\n    current_user.business_name = business_name\n    current_user.website = website\n    current_user.facebook = facebook\n    current_user.instagram = instagram\n    current_user.twitter = twitter\n    current_user.linkedin = linkedin\n    current_user.profile_completed = True\n    current_user.updated_at = datetime.utcnow()\n    \n    # Handle logo upload\n    if logo and logo.filename:\n        filename = generate_filename(logo.filename)\n        logo_path = os.path.join(\"static/uploads/logos\", filename)\n        \n        # Save uploaded file\n        with open(logo_path, \"wb\") as buffer:\n            content = await logo.read()\n            buffer.write(content)\n        \n        current_user.logo_filename = filename\n    \n    db.commit()\n    return RedirectResponse(url=\"/dashboard\", status_code=302)\n\n@app.get(\"/profile/edit\", response_class=HTMLResponse)\nasync def profile_edit_get(request: Request, current_user: User = Depends(get_current_user_required)):\n    return templates.TemplateResponse(\"profile_management.html\", {\n        \"request\": request,\n        \"current_user\": current_user\n    })\n\n@app.post(\"/profile/edit\")\nasync def profile_edit_post(\n    request: Request,\n    current_user: User = Depends(get_current_user_required),\n    db: Session = Depends(get_db),\n    full_name: str = Form(...),\n    phone: str = Form(None),\n    address: str = Form(None),\n    business_name: str = Form(None),\n    logo: UploadFile = File(None),\n    website: str = Form(None),\n    facebook: str = Form(None),\n    instagram: str = Form(None),\n    twitter: str = Form(None),\n    linkedin: str = Form(None)\n):\n    # Update user profile\n    current_user.full_name = full_name\n    current_user.phone = phone\n    current_user.address = address\n    current_user.business_name = business_name\n    current_user.website = website\n    current_user.facebook = facebook\n    current_user.instagram = instagram\n    current_user.twitter = twitter\n    current_user.linkedin = linkedin\n    current_user.updated_at = datetime.utcnow()\n    \n    # Handle logo upload\n    if logo and logo.filename:\n        filename = generate_filename(logo.filename)\n        logo_path = os.path.join(\"static/uploads/logos\", filename)\n        \n        # Save uploaded file\n        with open(logo_path, \"wb\") as buffer:\n            content = await logo.read()\n            buffer.write(content)\n        \n        current_user.logo_filename = filename\n    \n    db.commit()\n    return RedirectResponse(url=\"/profile/edit?message=Profile updated successfully!\", status_code=302)\n\n# Poster routes\n@app.get(\"/poster/generate\", response_class=HTMLResponse)\nasync def poster_generate_get(request: Request, current_user: User = Depends(get_current_user_required)):\n    if not current_user.profile_completed:\n        return RedirectResponse(url=\"/profile/setup?message=Please complete your profile first.\", status_code=302)\n    \n    return templates.TemplateResponse(\"generate_poster.html\", {\n        \"request\": request,\n        \"current_user\": current_user\n    })\n\n@app.post(\"/poster/generate\")\nasync def poster_generate_post(\n    request: Request,\n    current_user: User = Depends(get_current_user_required),\n    db: Session = Depends(get_db),\n    title: str = Form(...),\n    prompt: str = Form(...),\n    show_full_name: bool = Form(False),\n    show_phone: bool = Form(False),\n    show_address: bool = Form(False),\n    show_business_name: bool = Form(False),\n    show_website: bool = Form(False),\n    show_facebook: bool = Form(False),\n    show_instagram: bool = Form(False),\n    show_twitter: bool = Form(False),\n    show_linkedin: bool = Form(False),\n    is_public: bool = Form(False)\n):\n    # Validate prompt\n    if not validate_prompt(prompt):\n        return templates.TemplateResponse(\"generate_poster.html\", {\n            \"request\": request,\n            \"current_user\": current_user,\n            \"error\": \"Invalid prompt. Please ensure your content is appropriate.\"\n        })\n    \n    # Generate filename\n    filename = generate_filename(f\"{title}_poster.png\")\n    poster_path = os.path.join(\"static/uploads/posters\", filename)\n    \n    # Generate poster image\n    success = generate_poster_image(prompt, poster_path)\n    if not success:\n        return templates.TemplateResponse(\"generate_poster.html\", {\n            \"request\": request,\n            \"current_user\": current_user,\n            \"error\": \"Failed to generate poster. Please try again.\"\n        })\n    \n    # Get selected profile fields\n    selected_fields = []\n    if show_full_name: selected_fields.append('full_name')\n    if show_phone: selected_fields.append('phone')\n    if show_address: selected_fields.append('address')\n    if show_business_name: selected_fields.append('business_name')\n    if show_website: selected_fields.append('website')\n    if show_facebook: selected_fields.append('facebook')\n    if show_instagram: selected_fields.append('instagram')\n    if show_twitter: selected_fields.append('twitter')\n    if show_linkedin: selected_fields.append('linkedin')\n    \n    # Add profile overlay if fields selected\n    if selected_fields:\n        profile_data = current_user.get_profile_fields()\n        filtered_profile = {k: v for k, v in profile_data.items() if k in selected_fields and v}\n        \n        if filtered_profile:\n            add_profile_overlay(poster_path, filtered_profile, current_user.logo_filename)\n    \n    # Add watermark for free users\n    has_watermark = not current_user.is_premium\n    if has_watermark:\n        add_watermark(poster_path)\n    \n    # Save poster to database\n    new_poster = Poster(\n        title=title,\n        prompt=prompt,\n        filename=filename,\n        displayed_fields=json.dumps(selected_fields),\n        user_id=current_user.id,\n        is_public=is_public,\n        has_watermark=has_watermark,\n        created_at=datetime.utcnow()\n    )\n    \n    db.add(new_poster)\n    db.commit()\n    db.refresh(new_poster)\n    \n    return RedirectResponse(url=f\"/poster/view/{new_poster.id}\", status_code=302)\n\n@app.get(\"/poster/view/{poster_id}\", response_class=HTMLResponse)\nasync def poster_view(request: Request, poster_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):\n    poster = db.query(Poster).filter(Poster.id == poster_id).first()\n    if not poster:\n        raise HTTPException(status_code=404, detail=\"Poster not found\")\n    \n    # Check if user can view this poster\n    can_view = (poster.is_public or \n                (current_user and current_user.id == poster.user_id))\n    \n    if not can_view:\n        raise HTTPException(status_code=403, detail=\"Access denied\")\n    \n    return templates.TemplateResponse(\"poster_view.html\", {\n        \"request\": request,\n        \"current_user\": current_user,\n        \"poster\": poster\n    })\n\n@app.get(\"/poster/gallery\", response_class=HTMLResponse)\nasync def poster_gallery(request: Request, current_user: User = Depends(get_current_user_required), db: Session = Depends(get_db)):\n    user_posters = db.query(Poster).filter(Poster.user_id == current_user.id)\\\n                                   .order_by(desc(Poster.created_at)).all()\n    \n    return templates.TemplateResponse(\"poster_gallery.html\", {\n        \"request\": request,\n        \"current_user\": current_user,\n        \"posters\": user_posters\n    })\n\n# Subscription routes\n@app.get(\"/subscription\", response_class=HTMLResponse)\nasync def subscription_page(request: Request, current_user: User = Depends(get_current_user_required), db: Session = Depends(get_db)):\n    from stripe_service_fastapi import get_subscription_status\n    \n    subscription_info = get_subscription_status(current_user.id, db)\n    \n    return templates.TemplateResponse(\"subscription.html\", {\n        \"request\": request,\n        \"current_user\": current_user,\n        \"subscription\": subscription_info\n    })\n\n@app.post(\"/subscription/create-checkout-session\")\nasync def create_subscription_checkout(current_user: User = Depends(get_current_user_required)):\n    checkout_url = create_checkout_session(current_user.id)\n    if not checkout_url:\n        raise HTTPException(status_code=500, detail=\"Failed to create checkout session\")\n    \n    return RedirectResponse(url=checkout_url, status_code=302)\n\n@app.post(\"/subscription/create-portal-session\")\nasync def create_subscription_portal(current_user: User = Depends(get_current_user_required)):\n    if not current_user.stripe_customer_id:\n        raise HTTPException(status_code=400, detail=\"No subscription found\")\n    \n    portal_url = create_customer_portal_session(current_user.stripe_customer_id)\n    if not portal_url:\n        raise HTTPException(status_code=500, detail=\"Failed to create portal session\")\n    \n    return RedirectResponse(url=portal_url, status_code=302)\n\n@app.get(\"/subscription/success\", response_class=HTMLResponse)\nasync def subscription_success(request: Request, session_id: str = None):\n    return templates.TemplateResponse(\"subscription_success.html\", {\n        \"request\": request,\n        \"session_id\": session_id\n    })\n\n@app.get(\"/subscription/cancel\", response_class=HTMLResponse)\nasync def subscription_cancel(request: Request):\n    return templates.TemplateResponse(\"subscription_cancel.html\", {\n        \"request\": request\n    })\n\n@app.post(\"/stripe/webhook\")\nasync def stripe_webhook(request: Request, db: Session = Depends(get_db)):\n    payload = await request.body()\n    sig_header = request.headers.get('stripe-signature')\n    \n    if not sig_header:\n        raise HTTPException(status_code=400, detail=\"Missing signature\")\n    \n    result = handle_webhook(payload, sig_header, db)\n    if \"error\" in result:\n        raise HTTPException(status_code=400, detail=result[\"error\"])\n    \n    return result\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"fastapi_app:app\", host=\"0.0.0.0\", port=5000, reload=True)","size_bytes":19452},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, PasswordField, TextAreaField, BooleanField, SubmitField\nfrom wtforms.validators import DataRequired, Email, Length, EqualTo, Optional, URL\nfrom wtforms.widgets import CheckboxInput, ListWidget\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember_me = BooleanField('Remember Me')\n    submit = SubmitField('Sign In')\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=20)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n    password2 = PasswordField('Repeat Password', \n                             validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Register')\n\nclass ProfileSetupForm(FlaskForm):\n    full_name = StringField('Full Name', validators=[DataRequired(), Length(max=100)])\n    phone = StringField('Phone Number', validators=[Optional(), Length(max=20)])\n    address = TextAreaField('Address', validators=[Optional()])\n    business_name = StringField('Business Name', validators=[Optional(), Length(max=100)])\n    logo = FileField('Business Logo', validators=[Optional(), FileAllowed(['jpg', 'png', 'jpeg'])])\n    website = StringField('Website', validators=[Optional(), URL(), Length(max=200)])\n    facebook = StringField('Facebook URL', validators=[Optional(), URL(), Length(max=200)])\n    instagram = StringField('Instagram URL', validators=[Optional(), URL(), Length(max=200)])\n    twitter = StringField('Twitter URL', validators=[Optional(), URL(), Length(max=200)])\n    linkedin = StringField('LinkedIn URL', validators=[Optional(), URL(), Length(max=200)])\n    submit = SubmitField('Complete Profile')\n\nclass MultiCheckboxField(BooleanField):\n    widget = CheckboxInput()\n\nclass PosterGenerationForm(FlaskForm):\n    title = StringField('Poster Title', validators=[DataRequired(), Length(max=200)])\n    prompt = TextAreaField('Describe your poster', validators=[DataRequired(), Length(max=1000)])\n    \n    # Profile fields to display\n    show_full_name = BooleanField('Show Full Name')\n    show_phone = BooleanField('Show Phone Number')\n    show_address = BooleanField('Show Address')\n    show_business_name = BooleanField('Show Business Name')\n    show_website = BooleanField('Show Website')\n    show_facebook = BooleanField('Show Facebook')\n    show_instagram = BooleanField('Show Instagram')\n    show_twitter = BooleanField('Show Twitter')\n    show_linkedin = BooleanField('Show LinkedIn')\n    \n    is_public = BooleanField('Make poster public')\n    submit = SubmitField('Generate Poster')\n    \n    def get_selected_fields(self):\n        \"\"\"Return list of selected profile fields\"\"\"\n        fields = []\n        if self.show_full_name.data:\n            fields.append('full_name')\n        if self.show_phone.data:\n            fields.append('phone')\n        if self.show_address.data:\n            fields.append('address')\n        if self.show_business_name.data:\n            fields.append('business_name')\n        if self.show_website.data:\n            fields.append('website')\n        if self.show_facebook.data:\n            fields.append('facebook')\n        if self.show_instagram.data:\n            fields.append('instagram')\n        if self.show_twitter.data:\n            fields.append('twitter')\n        if self.show_linkedin.data:\n            fields.append('linkedin')\n        return fields\n\nclass ProfileEditForm(FlaskForm):\n    full_name = StringField('Full Name', validators=[Optional(), Length(max=100)])\n    phone = StringField('Phone Number', validators=[Optional(), Length(max=20)])\n    address = TextAreaField('Address', validators=[Optional()])\n    business_name = StringField('Business Name', validators=[Optional(), Length(max=100)])\n    logo = FileField('Business Logo', validators=[Optional(), FileAllowed(['jpg', 'png', 'jpeg'])])\n    website = StringField('Website', validators=[Optional(), URL(), Length(max=200)])\n    facebook = StringField('Facebook URL', validators=[Optional(), URL(), Length(max=200)])\n    instagram = StringField('Instagram URL', validators=[Optional(), URL(), Length(max=200)])\n    twitter = StringField('Twitter URL', validators=[Optional(), URL(), Length(max=200)])\n    linkedin = StringField('LinkedIn URL', validators=[Optional(), URL(), Length(max=200)])\n    submit = SubmitField('Update Profile')\n","size_bytes":4608},"gemini_service.py":{"content":"import os\nimport logging\nfrom google import genai\nfrom google.genai import types\n\n# Initialize Gemini client\nclient = genai.Client(api_key=os.environ.get(\"GEMINI_API_KEY\"))\n\ndef generate_poster_image(prompt, output_path):\n    \"\"\"\n    PRODUCTION-READY: Generate poster image with comprehensive error handling\n    \n    Args:\n        prompt (str): The text prompt for image generation\n        output_path (str): Path where the generated image will be saved\n        \n    Returns:\n        bool: True if successful, False otherwise\n    \"\"\"\n    import time\n    \n    try:\n        # Validate inputs\n        if not prompt or not prompt.strip():\n            logging.error(\"Empty or invalid prompt provided\")\n            return False\n            \n        if not output_path:\n            logging.error(\"No output path provided\")\n            return False\n        \n        # Ensure output directory exists\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        # Enhanced prompt for professional poster generation\n        enhanced_prompt = f\"\"\"Create a professional, eye-catching poster with the following requirements:\n        \n        Content: {prompt.strip()}\n        \n        Style guidelines:\n        - High-resolution, print-quality design (at least 1024x1024)\n        - Professional typography and layout\n        - Balanced composition with clear visual hierarchy\n        - Vibrant but tasteful color scheme\n        - Space for text overlay at the bottom\n        - Clean, modern aesthetic suitable for business use\n        - Avoid cluttered designs or excessive text\n        - Include visual elements that complement the content theme\n        - Suitable for both digital and print media\n        - Professional business poster style\n        \"\"\"\n        \n        # Implement retry logic for API resilience\n        max_retries = 3\n        retry_delay = 2  # seconds\n        \n        for attempt in range(max_retries):\n            try:\n                logging.info(f\"Attempting to generate image (attempt {attempt + 1}/{max_retries})\")\n                \n                response = client.models.generate_content(\n                    model=\"gemini-2.0-flash-preview-image-generation\",\n                    contents=enhanced_prompt,\n                    config=types.GenerateContentConfig(\n                        response_modalities=['TEXT', 'IMAGE']\n                    )\n                )\n                \n                if not response:\n                    logging.error(\"No response received from Gemini API\")\n                    if attempt < max_retries - 1:\n                        time.sleep(retry_delay)\n                        continue\n                    return False\n                \n                if not response.candidates:\n                    logging.error(\"No candidates returned from Gemini API\")\n                    if attempt < max_retries - 1:\n                        time.sleep(retry_delay)\n                        continue\n                    return False\n                \n                content = response.candidates[0].content\n                if not content or not content.parts:\n                    logging.error(\"No content parts in response\")\n                    if attempt < max_retries - 1:\n                        time.sleep(retry_delay)\n                        continue\n                    return False\n                \n                # Process response parts\n                image_saved = False\n                for part in content.parts:\n                    if part.text:\n                        logging.info(f\"Gemini response text: {part.text[:100]}...\")\n                    elif part.inline_data and part.inline_data.data:\n                        try:\n                            # Validate image data\n                            image_data = part.inline_data.data\n                            if len(image_data) < 1000:  # Suspiciously small image\n                                logging.warning(f\"Image data seems too small: {len(image_data)} bytes\")\n                                continue\n                            \n                            # Save image with atomic write (write to temp file first)\n                            temp_path = output_path + '.tmp'\n                            with open(temp_path, 'wb') as f:\n                                f.write(image_data)\n                            \n                            # Validate saved image\n                            try:\n                                from PIL import Image\n                                with Image.open(temp_path) as test_img:\n                                    if test_img.size[0] < 100 or test_img.size[1] < 100:\n                                        logging.error(f\"Generated image too small: {test_img.size}\")\n                                        os.remove(temp_path)\n                                        continue\n                            except Exception as validation_error:\n                                logging.error(f\"Image validation failed: {validation_error}\")\n                                if os.path.exists(temp_path):\n                                    os.remove(temp_path)\n                                continue\n                            \n                            # Move temp file to final location (atomic operation)\n                            import shutil\n                            shutil.move(temp_path, output_path)\n                            \n                            logging.info(f\"Image saved successfully to {output_path}\")\n                            image_saved = True\n                            break\n                            \n                        except Exception as save_error:\n                            logging.error(f\"Error saving image data: {save_error}\")\n                            if os.path.exists(temp_path):\n                                try:\n                                    os.remove(temp_path)\n                                except:\n                                    pass\n                            continue\n                \n                if image_saved:\n                    return True\n                else:\n                    logging.error(\"No valid image data found in response\")\n                    if attempt < max_retries - 1:\n                        time.sleep(retry_delay)\n                        continue\n                    return False\n                    \n            except Exception as api_error:\n                error_msg = str(api_error)\n                logging.error(f\"Gemini API error (attempt {attempt + 1}): {error_msg}\")\n                \n                # Check for specific error types\n                if \"500\" in error_msg or \"INTERNAL\" in error_msg:\n                    logging.warning(\"Gemini API internal server error - will retry\")\n                elif \"429\" in error_msg or \"quota\" in error_msg.lower():\n                    logging.error(\"API quota exceeded or rate limited\")\n                    return False\n                elif \"key\" in error_msg.lower() and \"invalid\" in error_msg.lower():\n                    logging.error(\"Invalid API key - check GEMINI_API_KEY environment variable\")\n                    return False\n                elif \"network\" in error_msg.lower() or \"connection\" in error_msg.lower():\n                    logging.warning(\"Network connectivity issue - will retry\")\n                else:\n                    logging.error(f\"Unexpected API error: {error_msg}\")\n                \n                if attempt < max_retries - 1:\n                    wait_time = retry_delay * (2 ** attempt)  # Exponential backoff\n                    logging.info(f\"Retrying in {wait_time} seconds...\")\n                    time.sleep(wait_time)\n                else:\n                    return False\n        \n        logging.error(\"All retry attempts failed\")\n        return False\n        \n    except Exception as e:\n        logging.error(f\"Unexpected error in generate_poster_image: {e}\")\n        return False\n\ndef validate_prompt(prompt):\n    \"\"\"\n    Validate and sanitize the prompt for appropriate content\n    \n    Args:\n        prompt (str): The user input prompt\n        \n    Returns:\n        tuple: (is_valid, sanitized_prompt or error_message)\n    \"\"\"\n    try:\n        # Basic content filtering\n        inappropriate_keywords = [\n            'violence', 'explicit', 'nsfw', 'adult', 'inappropriate',\n            'harmful', 'offensive', 'hate', 'discriminatory'\n        ]\n        \n        prompt_lower = prompt.lower()\n        for keyword in inappropriate_keywords:\n            if keyword in prompt_lower:\n                return False, f\"Content contains inappropriate material: {keyword}\"\n        \n        # Length validation\n        if len(prompt) < 10:\n            return False, \"Prompt is too short. Please provide more details.\"\n        \n        if len(prompt) > 1000:\n            return False, \"Prompt is too long. Please keep it under 1000 characters.\"\n        \n        # Basic sanitization\n        sanitized_prompt = prompt.strip()\n        \n        return True, sanitized_prompt\n        \n    except Exception as e:\n        logging.error(f\"Error validating prompt: {str(e)}\")\n        return False, \"Error validating prompt content\"\n","size_bytes":9214},"image_service.py":{"content":"import os\nimport uuid\nfrom PIL import Image, ImageDraw, ImageFont\nfrom flask import current_app\nimport logging\n\ndef add_watermark(image_path, output_path, is_premium=False):\n    \"\"\"\n    PRODUCTION-READY: Add watermark to image with comprehensive error handling\n    \n    Args:\n        image_path (str): Path to the source image\n        output_path (str): Path for the output image\n        is_premium (bool): Whether user has premium subscription\n        \n    Returns:\n        bool: True if successful, False otherwise\n    \"\"\"\n    import shutil\n    \n    try:\n        # Validate inputs\n        if not image_path or not output_path:\n            logging.error(\"Invalid input or output path provided\")\n            return False\n            \n        if not os.path.exists(image_path):\n            logging.error(f\"Input file does not exist: {image_path}\")\n            return False\n        \n        # Ensure output directory exists\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        # Premium users get watermark-free images\n        if is_premium:\n            try:\n                shutil.copy2(image_path, output_path)\n                logging.info(f\"Premium user - copied without watermark: {output_path}\")\n                return True\n            except Exception as e:\n                logging.error(f\"Error copying file for premium user: {e}\")\n                return False\n        \n        # Apply watermark for free users with robust error handling\n        try:\n            with Image.open(image_path) as img:\n                # Validate image\n                if img.size[0] == 0 or img.size[1] == 0:\n                    logging.error(\"Invalid image dimensions\")\n                    return False\n                \n                # Convert to RGBA for watermarking\n                if img.mode != 'RGBA':\n                    img = img.convert('RGBA')\n                \n                # Create watermark overlay\n                watermark = Image.new('RGBA', img.size, (0, 0, 0, 0))\n                draw = ImageDraw.Draw(watermark)\n                \n                # Watermark text\n                watermark_text = \"Posterly - Upgrade for Watermark-Free\"\n                \n                # Safe font loading with multiple fallbacks\n                font = None\n                font_paths = [\n                    \"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\",\n                    \"/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf\",\n                    \"/System/Library/Fonts/Arial.ttf\",  # macOS\n                    \"/usr/share/fonts/TTF/arial.ttf\"    # Alternative Linux\n                ]\n                \n                font_size = max(12, min(20, img.width // 40))  # Responsive but bounded\n                \n                for font_path in font_paths:\n                    try:\n                        if os.path.exists(font_path):\n                            font = ImageFont.truetype(font_path, font_size)\n                            break\n                    except Exception:\n                        continue\n                \n                # Fallback to default font\n                if font is None:\n                    try:\n                        font = ImageFont.load_default()\n                        font_size = 16  # Default size for fallback font\n                    except Exception:\n                        font = None\n                        font_size = 16  # Ensure font_size is always defined\n                \n                # Calculate text position with error handling\n                if font:\n                    try:\n                        bbox = draw.textbbox((0, 0), watermark_text, font=font)\n                        text_width = bbox[2] - bbox[0]\n                        text_height = bbox[3] - bbox[1]\n                    except Exception:\n                        text_width = len(watermark_text) * font_size // 2\n                        text_height = font_size\n                else:\n                    text_width = len(watermark_text) * 8\n                    text_height = 16\n                \n                # Position at bottom right with safe margins\n                margin = max(10, min(20, img.width // 100))\n                x = max(0, img.width - text_width - margin)\n                y = max(0, img.height - text_height - margin)\n                \n                # Draw semi-transparent background\n                bg_padding = max(5, font_size // 4)\n                try:\n                    draw.rectangle([\n                        max(0, x - bg_padding), max(0, y - bg_padding),\n                        min(img.width, x + text_width + bg_padding), \n                        min(img.height, y + text_height + bg_padding)\n                    ], fill=(0, 0, 0, 128))\n                    \n                    # Draw watermark text\n                    draw.text((x, y), watermark_text, font=font, fill=(255, 255, 255, 200))\n                except Exception as e:\n                    logging.warning(f\"Error drawing watermark, using simplified version: {e}\")\n                    # Fallback: simple text without background\n                    draw.text((x, y), \"POSTERLY\", font=font, fill=(255, 255, 255, 255))\n                \n                # Combine with original image\n                try:\n                    watermarked = Image.alpha_composite(img, watermark).convert('RGB')\n                except Exception as e:\n                    logging.warning(f\"Error compositing, using blend method: {e}\")\n                    # Fallback blend method\n                    watermarked = Image.blend(img.convert('RGB'), watermark.convert('RGB'), 0.1)\n                \n                # Save with multiple format attempts\n                save_successful = False\n                \n                # Try JPEG first\n                try:\n                    watermarked.save(output_path, 'JPEG', quality=95, optimize=True)\n                    save_successful = True\n                    logging.info(f\"Successfully saved watermarked image as JPEG: {output_path}\")\n                except Exception as jpeg_error:\n                    logging.warning(f\"JPEG save failed: {jpeg_error}\")\n                    \n                    # Try PNG as fallback\n                    try:\n                        png_path = output_path.rsplit('.', 1)[0] + '.png'\n                        watermarked.save(png_path, 'PNG', optimize=True)\n                        save_successful = True\n                        logging.info(f\"Saved as PNG fallback: {png_path}\")\n                    except Exception as png_error:\n                        logging.error(f\"PNG fallback also failed: {png_error}\")\n                \n                return save_successful\n                \n        except Exception as processing_error:\n            logging.error(f\"Error processing image: {processing_error}\")\n            \n            # Last resort: copy original file\n            try:\n                shutil.copy2(image_path, output_path)\n                logging.warning(f\"Processing failed, copied original: {output_path}\")\n                return True\n            except Exception as copy_error:\n                logging.error(f\"Even file copy failed: {copy_error}\")\n                return False\n                \n    except Exception as e:\n        logging.error(f\"Unexpected error in add_watermark: {e}\")\n        return False\n\ndef add_profile_overlay(image_path, output_path, profile_data, selected_fields):\n    \"\"\"\n    Add user profile information overlay to the poster\n    \n    Args:\n        image_path (str): Path to the source image\n        output_path (str): Path for the output image\n        profile_data (dict): User profile information\n        selected_fields (list): List of fields to display\n        \n    Returns:\n        bool: True if successful, False otherwise\n    \"\"\"\n    try:\n        with Image.open(image_path) as img:\n            overlay = Image.new('RGBA', img.size, (0, 0, 0, 0))\n            draw = ImageDraw.Draw(overlay)\n            \n            # Prepare text to display\n            display_text = []\n            for field in selected_fields:\n                if field in profile_data and profile_data[field]:\n                    value = profile_data[field]\n                    if field == 'full_name':\n                        display_text.append(value)\n                    elif field == 'business_name':\n                        display_text.append(value)\n                    elif field == 'phone':\n                        display_text.append(f\"📞 {value}\")\n                    elif field == 'address':\n                        display_text.append(f\"📍 {value}\")\n                    elif field == 'website':\n                        display_text.append(f\"🌐 {value}\")\n                    elif field == 'facebook':\n                        display_text.append(f\"📘 {value}\")\n                    elif field == 'instagram':\n                        display_text.append(f\"📷 {value}\")\n                    elif field == 'twitter':\n                        display_text.append(f\"🐦 {value}\")\n                    elif field == 'linkedin':\n                        display_text.append(f\"💼 {value}\")\n            \n            if display_text:\n                # Font settings\n                try:\n                    font_size = max(16, img.width // 60)\n                    font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", font_size)\n                    bold_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", font_size + 4)\n                except:\n                    font = ImageFont.load_default()\n                    bold_font = ImageFont.load_default()\n                \n                # Calculate text area\n                line_height = font_size + 6\n                text_area_height = len(display_text) * line_height + 40\n                \n                # Create background for text\n                bg_y = img.height - text_area_height\n                draw.rectangle([0, bg_y, img.width, img.height], \n                             fill=(0, 0, 0, 180))\n                \n                # Draw text\n                y_offset = bg_y + 20\n                for i, text in enumerate(display_text):\n                    current_font = bold_font if i < 2 else font  # Name and business name in bold\n                    text_color = (255, 255, 255, 255)\n                    \n                    # Center align text\n                    bbox = draw.textbbox((0, 0), text, font=current_font)\n                    text_width = bbox[2] - bbox[0]\n                    x_offset = (img.width - text_width) // 2\n                    \n                    draw.text((x_offset, y_offset), text, font=current_font, fill=text_color)\n                    y_offset += line_height\n            \n            # Combine with original image\n            img = Image.alpha_composite(img.convert('RGBA'), overlay).convert('RGB')\n            img.save(output_path, 'JPEG', quality=95)\n            return True\n            \n    except Exception as e:\n        logging.error(f\"Error adding profile overlay: {str(e)}\")\n        return False\n\ndef generate_filename(extension='.jpg'):\n    \"\"\"Generate a unique filename\"\"\"\n    return str(uuid.uuid4()) + extension\n\ndef save_uploaded_file(file, upload_folder):\n    \"\"\"\n    Save uploaded file with unique filename\n    \n    Args:\n        file: FileStorage object from Flask\n        upload_folder (str): Directory to save the file\n        \n    Returns:\n        str: Filename if successful, None otherwise\n    \"\"\"\n    try:\n        if file and file.filename:\n            # Get file extension\n            extension = os.path.splitext(file.filename)[1].lower()\n            if extension not in ['.jpg', '.jpeg', '.png']:\n                return None\n            \n            # Generate unique filename\n            filename = generate_filename(extension)\n            filepath = os.path.join(upload_folder, filename)\n            \n            # Ensure directory exists\n            os.makedirs(upload_folder, exist_ok=True)\n            \n            # Save file\n            file.save(filepath)\n            return filename\n    except Exception as e:\n        logging.error(f\"Error saving uploaded file: {str(e)}\")\n    \n    return None\n","size_bytes":12214},"main.py":{"content":"from app import app  # noqa: F401\n","size_bytes":34},"models.py":{"content":"from datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import db\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    \n    # Profile information\n    full_name = db.Column(db.String(100))\n    phone = db.Column(db.String(20))\n    address = db.Column(db.Text)\n    business_name = db.Column(db.String(100))\n    logo_filename = db.Column(db.String(100))\n    website = db.Column(db.String(200))\n    facebook = db.Column(db.String(200))\n    instagram = db.Column(db.String(200))\n    twitter = db.Column(db.String(200))\n    linkedin = db.Column(db.String(200))\n    \n    # Account status\n    is_premium = db.Column(db.Boolean, default=False)\n    profile_completed = db.Column(db.Boolean, default=False)\n    stripe_customer_id = db.Column(db.String(100))\n    \n    # MASTER ADMIN FLAG - For internal testing and admin access\n    # This user bypasses all usage limits and has unlimited access\n    is_master_admin = db.Column(db.Boolean, default=False)\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    posters = db.relationship('Poster', backref='user', lazy=True, cascade='all, delete-orphan')\n    subscription = db.relationship('Subscription', backref='user', uselist=False, lazy=True)\n    \n    def get_subscription_plan(self):\n        \"\"\"Get current subscription plan\"\"\"\n        if self.subscription and self.subscription.status == 'active':\n            return self.subscription.plan_id\n        return 'free'\n    \n    def has_premium_access(self):\n        \"\"\"Check if user has premium access\"\"\"\n        plan = self.get_subscription_plan()\n        return plan in ['pro', 'premium'] or self.is_master_admin\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def has_unlimited_access(self):\n        \"\"\"Check if user has unlimited access (premium or master admin)\"\"\"\n        return self.is_premium or self.is_master_admin\n    \n    def is_admin_user(self):\n        \"\"\"Check if this is the master admin user\"\"\"\n        return self.is_master_admin\n    \n    def get_profile_fields(self):\n        \"\"\"Return dictionary of profile fields for poster overlay\"\"\"\n        return {\n            'full_name': self.full_name,\n            'phone': self.phone,\n            'address': self.address,\n            'business_name': self.business_name,\n            'website': self.website,\n            'facebook': self.facebook,\n            'instagram': self.instagram,\n            'twitter': self.twitter,\n            'linkedin': self.linkedin\n        }\n\nclass Poster(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    prompt = db.Column(db.Text, nullable=False)\n    filename = db.Column(db.String(100), nullable=False)\n    \n    # Profile fields displayed on this poster (JSON string)\n    displayed_fields = db.Column(db.Text)  # JSON string of field names\n    \n    # Metadata\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    is_public = db.Column(db.Boolean, default=False)\n    has_watermark = db.Column(db.Boolean, default=True)\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def get_displayed_fields_list(self):\n        \"\"\"Convert JSON string to list\"\"\"\n        import json\n        if self.displayed_fields:\n            try:\n                return json.loads(self.displayed_fields)\n            except:\n                return []\n        return []\n    \n    def set_displayed_fields(self, fields_list):\n        \"\"\"Convert list to JSON string\"\"\"\n        import json\n        self.displayed_fields = json.dumps(fields_list)\n\nclass Subscription(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    stripe_customer_id = db.Column(db.String(100))\n    stripe_subscription_id = db.Column(db.String(100), unique=True)\n    plan_id = db.Column(db.String(20), default='free')  # free, pro, premium\n    status = db.Column(db.String(20), default='active')  # active, canceled, past_due, etc.\n    current_period_start = db.Column(db.DateTime)\n    current_period_end = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n","size_bytes":4929},"models_fastapi.py":{"content":"from datetime import datetime\nfrom sqlalchemy import Column, Integer, String, Text, Boolean, DateTime, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom passlib.context import CryptContext\nimport json\n\nBase = declarative_base()\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\nclass User(Base):\n    __tablename__ = 'users'\n    \n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(80), unique=True, nullable=False, index=True)\n    email = Column(String(120), unique=True, nullable=False, index=True)\n    password_hash = Column(String(256), nullable=False)\n    \n    # Profile information\n    full_name = Column(String(100))\n    phone = Column(String(20))\n    address = Column(Text)\n    business_name = Column(String(100))\n    logo_filename = Column(String(100))\n    website = Column(String(200))\n    facebook = Column(String(200))\n    instagram = Column(String(200))\n    twitter = Column(String(200))\n    linkedin = Column(String(200))\n    \n    # Account status\n    is_premium = Column(Boolean, default=False)\n    profile_completed = Column(Boolean, default=False)\n    stripe_customer_id = Column(String(100))\n    \n    # MASTER ADMIN FLAG - For internal testing and admin access\n    # This user bypasses all usage limits and has unlimited access\n    is_master_admin = Column(Boolean, default=False)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    posters = relationship('Poster', back_populates='user', cascade='all, delete-orphan')\n    subscriptions = relationship('Subscription', back_populates='user', cascade='all, delete-orphan')\n    \n    def set_password(self, password: str):\n        self.password_hash = pwd_context.hash(password)\n    \n    def verify_password(self, password: str) -> bool:\n        return pwd_context.verify(password, self.password_hash)\n    \n    def has_unlimited_access(self) -> bool:\n        \"\"\"Check if user has unlimited access (premium or master admin)\"\"\"\n        return self.is_premium or self.is_master_admin\n    \n    def is_admin_user(self) -> bool:\n        \"\"\"Check if this is the master admin user\"\"\"\n        return self.is_master_admin\n    \n    def get_profile_fields(self):\n        \"\"\"Return dictionary of profile fields for poster overlay\"\"\"\n        return {\n            'full_name': self.full_name,\n            'phone': self.phone,\n            'address': self.address,\n            'business_name': self.business_name,\n            'website': self.website,\n            'facebook': self.facebook,\n            'instagram': self.instagram,\n            'twitter': self.twitter,\n            'linkedin': self.linkedin\n        }\n\nclass Poster(Base):\n    __tablename__ = 'posters'\n    \n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String(200), nullable=False)\n    prompt = Column(Text, nullable=False)\n    filename = Column(String(100), nullable=False)\n    \n    # Profile fields displayed on this poster (JSON string)\n    displayed_fields = Column(Text)  # JSON string of field names\n    \n    # Metadata\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    is_public = Column(Boolean, default=False)\n    has_watermark = Column(Boolean, default=True)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = relationship('User', back_populates='posters')\n    \n    def get_displayed_fields_list(self):\n        \"\"\"Convert JSON string to list\"\"\"\n        if self.displayed_fields:\n            try:\n                return json.loads(self.displayed_fields)\n            except json.JSONDecodeError:\n                return []\n        return []\n    \n    def set_displayed_fields_list(self, fields_list):\n        \"\"\"Convert list to JSON string\"\"\"\n        self.displayed_fields = json.dumps(fields_list)\n\nclass Subscription(Base):\n    __tablename__ = 'subscriptions'\n    \n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    stripe_subscription_id = Column(String(100), unique=True, nullable=False)\n    stripe_customer_id = Column(String(100), nullable=False)\n    status = Column(String(50), nullable=False)  # active, canceled, past_due, etc.\n    current_period_start = Column(DateTime)\n    current_period_end = Column(DateTime)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    user = relationship('User', back_populates='subscriptions')\n    \n    def is_active(self):\n        \"\"\"Check if subscription is currently active\"\"\"\n        return self.status == 'active' and self.current_period_end > datetime.utcnow()","size_bytes":4917},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn[gthread]>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n    \"google-genai>=1.28.0\",\n    \"stripe>=12.4.0\",\n    \"sift-stack-py>=0.8.2\",\n    \"sqlalchemy>=2.0.42\",\n    \"flask-wtf>=1.2.2\",\n    \"wtforms>=3.2.1\",\n    \"werkzeug>=3.1.3\",\n    \"pillow>=11.3.0\",\n    \"fastapi>=0.116.1\",\n    \"python-multipart>=0.0.20\",\n    \"passlib[bcrypt]>=1.7.4\",\n    \"pydantic-settings>=2.10.1\",\n    \"uvicorn>=0.35.0\",\n    \"jinja2>=3.1.6\",\n    \"python-jose[cryptography]>=3.5.0\",\n    \"pydantic>=2.11.7\",\n    \"jose>=1.0.0\",\n    \"a2wsgi>=1.10.10\",\n]\n","size_bytes":849},"replit.md":{"content":"# Overview\n\nPosterly is an AI-powered poster generation web application that allows users to create professional business posters using Google Gemini AI. The platform integrates user business profiles with AI-generated content, enabling automatic overlay of business information on generated posters. Users can choose which profile elements to display and manage subscription tiers for premium features like watermark-free downloads.\n\n## Recent Updates (August 3, 2025)\n- **Enhanced Dashboard**: Added poster statistics display with recent posters grid view\n- **Canva-style Poster Editor**: Implemented comprehensive editing interface with Fabric.js canvas\n- **Professional Gallery**: Created responsive poster gallery with hover effects and management options\n- **Real-time Editing**: Added text editing, shape tools, image uploads, layer management\n- **Version Control**: Implemented poster edit saving with automatic versioning\n- **Sharing Features**: Added public/private toggle and poster sharing functionality\n- **Production-Ready Fixes**: Fixed routing issues for poster editor, added robust error handling for image loading, implemented master admin authentication system with unlimited access\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Backend Architecture\n- **Framework**: FastAPI (Python) with SQLAlchemy ORM for database operations (converted from Flask on 2025-08-03)\n- **Authentication**: JWT-based authentication with HTTP-only cookies for session management\n- **Security**: FastAPI built-in security features with Pydantic validation\n- **Database**: SQLAlchemy with support for both SQLite (development) and PostgreSQL (production)\n- **File Handling**: FastAPI multipart forms for secure file uploads with size limits (16MB max)\n- **Image Processing**: PIL (Pillow) for watermarking and profile overlay functionality\n- **ASGI Server**: Uvicorn for production deployment (compatible with current Replit workflow via ASGI adapter)\n\n## Frontend Architecture\n- **Template Engine**: Jinja2 with FastAPI-compatible templating system\n- **UI Framework**: Bootstrap 5 with dark theme for responsive design\n- **JavaScript**: Vanilla JS with Bootstrap components for interactivity\n- **Canvas Editing**: Fabric.js library for advanced poster editing capabilities\n- **Styling**: Custom CSS with Font Awesome icons and responsive design patterns\n- **Interactive Features**: Real-time editing, drag-and-drop, layer management, zoom controls\n\n## AI Integration\n- **Image Generation**: Google Gemini 2.0 Flash Preview API for creating poster images from text prompts\n- **Prompt Enhancement**: Server-side prompt optimization for professional poster generation\n- **Content Validation**: Prompt validation and safety checks before AI generation\n\n## Data Architecture\nThe system uses a relational database with three main entities:\n- **Users**: Stores authentication credentials and comprehensive business profile information (name, phone, address, business details, social media links)\n- **Posters**: Tracks generated poster metadata, file paths, visibility settings, selected profile fields for overlay, public/private status, and editing history\n- **Subscriptions**: Manages premium subscription status and Stripe customer relationships\n\n## Key Features\n- **AI Poster Generation**: Create professional posters from text prompts using Google Gemini 2.0\n- **Advanced Editor**: Canva-like editing interface with text tools, shapes, images, and layers\n- **Dashboard Analytics**: View poster statistics, recent creations, and account status\n- **Gallery Management**: Professional gallery view with sharing and privacy controls\n- **Profile Integration**: Overlay business information automatically on generated posters\n- **Version Control**: Edit and save poster revisions with automatic file versioning\n\n## Authentication & Authorization\n- **Session Management**: Flask-Login with secure session handling\n- **Password Security**: Werkzeug password hashing with salt\n- **Profile Flow**: Mandatory profile completion after registration before poster generation\n- **Access Control**: Route-level authentication decorators and subscription-based feature gating\n\n## File Management\n- **Upload Security**: Secure filename generation and file type validation\n- **Storage Structure**: Organized static file storage with separate directories for logos and posters\n- **Image Processing Pipeline**: Automated watermark application for free users and business overlay integration\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini API**: Primary AI image generation service requiring GEMINI_API_KEY\n- **Content Moderation**: Built-in prompt validation for appropriate content generation\n\n## Payment Processing\n- **Stripe**: Subscription management, checkout sessions, and customer portal\n- **Webhook Handling**: Automated subscription status updates via Stripe webhooks\n- **Environment Variables**: STRIPE_SECRET_KEY and STRIPE_PUBLISHABLE_KEY required\n\n## Database\n- **Production**: PostgreSQL database via DATABASE_URL environment variable\n- **Development**: SQLite fallback for local development\n- **Connection Pooling**: Configured for production stability with connection recycling\n\n## Infrastructure\n- **Deployment**: Replit Always-On hosting with proxy fix middleware\n- **Environment Config**: Environment-based configuration for secrets and API keys\n- **Session Security**: SESSION_SECRET environment variable for secure session management\n\n## Frontend Libraries\n- **Bootstrap CDN**: UI framework and components\n- **Font Awesome CDN**: Icon library for enhanced UI\n- **Custom Assets**: Local CSS and JavaScript for application-specific functionality","size_bytes":5710},"routes.py":{"content":"import os\nimport json\nimport logging\nfrom flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, send_from_directory, Response\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.utils import secure_filename\nfrom sqlalchemy import desc\n\nfrom app import db\nfrom models import User, Poster, Subscription\nfrom forms import LoginForm, RegistrationForm, ProfileSetupForm, PosterGenerationForm, ProfileEditForm\nfrom gemini_service import generate_poster_image, validate_prompt\nfrom image_service import add_watermark, add_profile_overlay, save_uploaded_file, generate_filename\nfrom stripe_service import StripeService\n\ndef render_standalone_editor(poster, width, height):\n    \"\"\"\n    Render standalone poster editor without Bootstrap interference\n    \"\"\"\n    html_template = f'''<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Poster - {poster.title} - Posterly</title>\n    \n    <!-- Font Awesome -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    \n    <!-- Fabric.js -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js\"></script>\n    <!-- jsPDF for PDF export -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n\n    <style>\n        :root {{\n            --primary-color: #4A90E2;\n            --primary-hover: #357ABD;\n            --secondary-color: #50E3C2;\n            --background-dark: #2c3e50;\n            --panel-dark: #34495e;\n            --text-light: #ecf0f1;\n            --border-color: #4a6a8a;\n            --success-color: #27ae60;\n            --danger-color: #e74c3c;\n            --warning-color: #f39c12;\n            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.2);\n        }}\n\n        * {{\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }}\n\n        body {{\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--background-dark);\n            color: var(--text-light);\n            overflow: auto;\n        }}\n\n        .editor-container {{\n            display: flex;\n            height: 100vh;\n            background: #1a1a1a;\n        }}\n\n        /* Left Panel Styling */\n        .left-panel {{\n            width: 200px;\n            background-color: #2d3748;\n            padding: 16px;\n            display: flex;\n            flex-direction: column;\n            border-right: 1px solid #4a5568;\n            overflow-y: auto;\n            max-height: 100vh;\n        }}\n\n        .logo-header {{\n            display: flex;\n            align-items: center;\n            margin-bottom: 24px;\n            padding-bottom: 16px;\n            border-bottom: 1px solid #4a5568;\n        }}\n\n        .logo-header i {{\n            font-size: 20px;\n            color: #4299e1;\n            margin-right: 8px;\n        }}\n\n        .logo-header h2 {{\n            margin: 0;\n            color: white;\n            font-size: 18px;\n            font-weight: 600;\n        }}\n\n        /* Main Tools */\n        .main-tools {{\n            margin-bottom: 30px;\n        }}\n\n        .tool-btn {{\n            display: flex;\n            align-items: center;\n            width: 100%;\n            padding: 12px 16px;\n            background: none;\n            border: none;\n            color: #a0aec0;\n            font-size: 14px;\n            cursor: pointer;\n            transition: all 0.2s ease;\n            border-radius: 6px;\n            margin-bottom: 4px;\n            text-align: left;\n        }}\n\n        .tool-btn:hover {{\n            background-color: #4a5568;\n            color: white;\n        }}\n\n        .tool-btn.active {{\n            background-color: #4299e1;\n            color: white;\n        }}\n\n        .tool-btn i {{\n            margin-right: 15px;\n            width: 20px;\n            font-size: 18px;\n        }}\n\n        .tool-separator {{\n            height: 1px;\n            background-color: var(--border-color);\n            margin: 15px 0;\n        }}\n\n        /* Collapsible Panels */\n        .panel {{\n            border-bottom: 1px solid var(--border-color);\n            margin-bottom: 20px;\n        }}\n\n        .panel-header {{\n            width: 100%;\n            background: none;\n            border: none;\n            color: #4299e1;\n            padding: 12px 16px;\n            font-size: 13px;\n            font-weight: 500;\n            cursor: pointer;\n            text-align: left;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            border-radius: 6px;\n            transition: all 0.2s ease;\n        }}\n\n        .panel-header:hover {{\n            background-color: #4a5568;\n        }}\n\n        .panel-header.active {{\n            background-color: #4a5568;\n            color: #4299e1;\n        }}\n\n        .panel-header i:first-child {{\n            margin-right: 12px;\n            color: var(--primary-color);\n        }}\n\n        .toggle-icon {{\n            transition: transform 0.2s ease;\n        }}\n\n        .panel-header.active .toggle-icon {{\n            transform: rotate(180deg);\n        }}\n\n        .panel-content {{\n            padding: 0 15px 20px;\n            display: none;\n        }}\n\n        .panel-content.active {{\n            display: block;\n        }}\n\n        /* Main Area Styling */\n        .main-area {{\n            flex-grow: 1;\n            display: flex;\n            flex-direction: column;\n        }}\n\n        .main-header {{\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 16px 24px;\n            background-color: #2d3748;\n            border-bottom: 1px solid #4a5568;\n            height: 70px;\n        }}\n\n        .poster-title-container {{\n            display: flex;\n            align-items: center;\n        }}\n\n        .poster-title-container i {{\n            font-size: 24px;\n            color: var(--primary-color);\n            margin-right: 12px;\n        }}\n\n        .poster-title {{\n            background: none;\n            border: none;\n            color: var(--text-light);\n            font-size: 22px;\n            font-weight: bold;\n            min-width: 200px;\n            padding: 8px 12px;\n            border-radius: 6px;\n            transition: background-color 0.2s ease;\n        }}\n\n        .poster-title:focus {{\n            background-color: rgba(255, 255, 255, 0.1);\n            outline: none;\n        }}\n\n        .header-actions {{\n            display: flex;\n            gap: 12px;\n        }}\n\n        .btn {{\n            padding: 8px 16px;\n            border: none;\n            border-radius: 6px;\n            font-size: 13px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.2s ease;\n            display: inline-flex;\n            align-items: center;\n            gap: 6px;\n            text-decoration: none;\n        }}\n\n        .btn-primary {{\n            background-color: #4299e1;\n            color: white;\n        }}\n\n        .btn-primary:hover {{\n            background-color: #3182ce;\n        }}\n\n        .btn-secondary {{\n            background: transparent;\n            border: 1px solid #4a5568;\n            color: #a0aec0;\n        }}\n\n        .btn-secondary:hover {{\n            background-color: #4a5568;\n            color: white;\n        }}\n\n        .btn-success {{\n            background-color: #48bb78;\n            color: white;\n        }}\n\n        .btn-success:hover {{\n            background-color: #38a169;\n        }}\n\n        /* Canvas & Loading Overlay */\n        .canvas-container {{\n            flex-grow: 1;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            position: relative;\n            padding: 40px;\n            background: #1a1a1a;\n            overflow: auto;\n            min-height: calc(100vh - 70px);\n        }}\n\n        .canvas-wrapper {{\n            position: relative;\n            border-radius: 8px;\n            overflow: hidden;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n            background: white;\n            border: 1px solid #4a5568;\n        }}\n\n        .loading-overlay {{\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(44, 62, 80, 0.95);\n            backdrop-filter: blur(8px);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            z-index: 100;\n            border-radius: 12px;\n            transition: all 0.3s ease;\n        }}\n\n        .loading-overlay.hidden {{\n            opacity: 0;\n            visibility: hidden;\n        }}\n\n        .spinner {{\n            border: 6px solid rgba(255, 255, 255, 0.3);\n            border-radius: 50%;\n            border-top: 6px solid var(--secondary-color);\n            width: 60px;\n            height: 60px;\n            animation: spin 1s linear infinite;\n            margin-bottom: 24px;\n        }}\n\n        @keyframes spin {{\n            0% {{ transform: rotate(0deg); }}\n            100% {{ transform: rotate(360deg); }}\n        }}\n\n        .loading-text {{\n            font-size: 18px;\n            font-weight: 600;\n            color: var(--text-light);\n        }}\n\n        #posterCanvas {{\n            display: block;\n            border-radius: 12px;\n        }}\n\n        /* Layer Items */\n        .layer-item {{\n            background-color: #4a5568;\n            border: none;\n            border-radius: 6px;\n            padding: 8px 12px;\n            margin-bottom: 4px;\n            cursor: pointer;\n            transition: all 0.2s ease;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }}\n\n        .layer-item:hover {{\n            background-color: #5a6578;\n        }}\n\n        .layer-item.active {{\n            background-color: #4299e1;\n        }}\n\n        .layer-name {{\n            font-size: 12px;\n            color: white;\n            font-weight: 400;\n        }}\n\n        .layer-controls {{\n            display: flex;\n            gap: 6px;\n        }}\n\n        .layer-control-btn {{\n            width: 28px;\n            height: 28px;\n            border: none;\n            background: transparent;\n            border-radius: 4px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: var(--text-light);\n            font-size: 12px;\n            transition: all 0.2s ease;\n        }}\n\n        .layer-control-btn:hover {{\n            background-color: rgba(255, 255, 255, 0.2);\n        }}\n\n        /* Properties Panel */\n        .property-group {{\n            margin-bottom: 20px;\n        }}\n\n        .property-label {{\n            font-size: 14px;\n            font-weight: 600;\n            color: var(--text-light);\n            margin-bottom: 8px;\n            display: block;\n        }}\n\n        .property-input, .property-select {{\n            width: 100%;\n            padding: 10px 12px;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            font-size: 14px;\n            background-color: rgba(255, 255, 255, 0.1);\n            color: var(--text-light);\n            transition: all 0.2s ease;\n        }}\n\n        .property-input:focus, .property-select:focus {{\n            outline: none;\n            border-color: var(--primary-color);\n            background-color: rgba(255, 255, 255, 0.15);\n        }}\n\n        .property-row {{\n            display: flex;\n            gap: 10px;\n        }}\n\n        .property-row .property-input {{\n            flex: 1;\n        }}\n\n        .color-picker {{\n            width: 40px;\n            height: 38px;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            cursor: pointer;\n            transition: all 0.2s ease;\n        }}\n\n        .color-picker:hover {{\n            border-color: var(--primary-color);\n        }}\n\n        /* Export Buttons */\n        .export-btn {{\n            display: flex;\n            align-items: center;\n            width: 100%;\n            padding: 12px 16px;\n            margin-bottom: 8px;\n            background-color: rgba(74, 144, 226, 0.2);\n            border: 1px solid var(--primary-color);\n            color: var(--text-light);\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 14px;\n            font-weight: 500;\n            transition: all 0.2s ease;\n            gap: 12px;\n        }}\n\n        .export-btn:hover {{\n            background-color: rgba(74, 144, 226, 0.3);\n            transform: translateX(5px);\n        }}\n\n        .export-btn i {{\n            color: var(--primary-color);\n            font-size: 16px;\n        }}\n\n        /* Controls */\n        .canvas-controls {{\n            position: absolute;\n            bottom: 20px;\n            right: 20px;\n            display: flex;\n            gap: 8px;\n            background: rgba(45, 55, 72, 0.95);\n            backdrop-filter: blur(10px);\n            padding: 8px;\n            border-radius: 8px;\n            border: 1px solid #4a5568;\n        }}\n\n        .control-btn {{\n            width: 36px;\n            height: 36px;\n            background: transparent;\n            border: 1px solid #4a5568;\n            border-radius: 6px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: #a0aec0;\n            font-size: 14px;\n            transition: all 0.2s ease;\n        }}\n\n        .control-btn:hover {{\n            background-color: #4a5568;\n            border-color: #4299e1;\n            color: white;\n        }}\n\n        .control-btn.active {{\n            background-color: #4299e1;\n            border-color: #4299e1;\n            color: white;\n        }}\n\n        /* Success/Error Messages */\n        .message {{\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 16px 20px;\n            border-radius: 8px;\n            font-size: 14px;\n            font-weight: 600;\n            z-index: 1000;\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            box-shadow: var(--shadow-lg);\n            transition: all 0.3s ease;\n        }}\n\n        .message.success {{\n            background-color: var(--success-color);\n            color: white;\n        }}\n\n        .message.error {{\n            background-color: var(--danger-color);\n            color: white;\n        }}\n\n        /* Responsive */\n        @media (max-width: 1024px) {{\n            .left-panel {{\n                width: 280px;\n            }}\n            \n            .canvas-container {{\n                padding: 20px;\n            }}\n        }}\n\n        @media (max-width: 768px) {{\n            .left-panel {{\n                position: absolute;\n                left: -100%;\n                width: 280px;\n                height: 100vh;\n                z-index: 40;\n                transition: left 0.3s ease;\n                box-shadow: var(--shadow-lg);\n            }}\n            \n            .left-panel.open {{\n                left: 0;\n            }}\n            \n            .main-header {{\n                padding: 15px 20px;\n            }}\n            \n            .poster-title {{\n                font-size: 18px;\n            }}\n            \n            .canvas-container {{\n                padding: 16px;\n            }}\n        }}\n    </style>\n</head>\n<body>\n    <div class=\"editor-container\">\n        <!-- Left Panel: Tools & Controls -->\n        <aside class=\"left-panel\">\n            <div class=\"logo-header\">\n                <i class=\"fas fa-palette\"></i>\n                <h2>Posterly</h2>\n            </div>\n\n            <div class=\"main-tools\">\n                <!-- Basic Tools -->\n                <button class=\"tool-btn active\" id=\"selectTool\" onclick=\"setTool('select')\">\n                    <i class=\"fas fa-mouse-pointer\"></i><span>Select</span>\n                </button>\n                <button class=\"tool-btn\" id=\"textTool\" onclick=\"setTool('text')\">\n                    <i class=\"fas fa-font\"></i><span>Add Text</span>\n                </button>\n                <button class=\"tool-btn\" onclick=\"showShapesMenu(this)\">\n                    <i class=\"fas fa-shapes\"></i><span>Add Shape</span>\n                </button>\n                \n                <div class=\"tool-separator\"></div>\n                \n                <button class=\"tool-btn\" onclick=\"undoAction()\">\n                    <i class=\"fas fa-undo\"></i><span>Undo</span>\n                </button>\n                <button class=\"tool-btn\" onclick=\"redoAction()\">\n                    <i class=\"fas fa-redo\"></i><span>Redo</span>\n                </button>\n                <button class=\"tool-btn\" onclick=\"deleteSelected()\">\n                    <i class=\"fas fa-trash\"></i><span>Delete</span>\n                </button>\n            </div>\n\n            <!-- Collapsible Panels -->\n            <div class=\"panel-group\">\n                <div class=\"panel\">\n                    <button class=\"panel-header\" onclick=\"togglePanel(this)\">\n                        <span><i class=\"fas fa-layer-group\"></i> Layers</span>\n                        <i class=\"fas fa-chevron-down toggle-icon\"></i>\n                    </button>\n                    <div class=\"panel-content\" id=\"layersPanel\">\n                        <!-- Layer items will be dynamically added here -->\n                        <p style=\"color: var(--text-light); opacity: 0.7; font-size: 14px;\">Your layers will appear here.</p>\n                    </div>\n                </div>\n\n                <div class=\"panel\">\n                    <button class=\"panel-header\" onclick=\"togglePanel(this)\">\n                        <span><i class=\"fas fa-sliders-h\"></i> Properties</span>\n                        <i class=\"fas fa-chevron-down toggle-icon\"></i>\n                    </button>\n                    <div class=\"panel-content\" id=\"propertiesPanel\">\n                        <p style=\"color: var(--text-light); opacity: 0.7; font-size: 14px;\">Select an object to edit its properties.</p>\n                    </div>\n                </div>\n\n                <div class=\"panel\">\n                    <button class=\"panel-header\" onclick=\"togglePanel(this)\">\n                        <span><i class=\"fas fa-file-export\"></i> Export</span>\n                        <i class=\"fas fa-chevron-down toggle-icon\"></i>\n                    </button>\n                    <div class=\"panel-content\">\n                        <button class=\"export-btn\" onclick=\"exportAs('png')\">\n                            <i class=\"fas fa-file-image\"></i>Export as PNG\n                        </button>\n                        <button class=\"export-btn\" onclick=\"exportAs('jpg')\">\n                            <i class=\"fas fa-file-image\"></i>Export as JPG\n                        </button>\n                        <button class=\"export-btn\" onclick=\"exportAs('pdf')\">\n                            <i class=\"fas fa-file-pdf\"></i>Export as PDF\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </aside>\n\n        <!-- Right Panel: Main Area -->\n        <main class=\"main-area\">\n            <header class=\"main-header\">\n                <div class=\"poster-title-container\">\n                    <i class=\"fas fa-image\"></i>\n                    <input type=\"text\" value=\"{poster.title}\" class=\"poster-title\" id=\"posterTitle\">\n                </div>\n                <div class=\"header-actions\">\n                    <button class=\"btn btn-secondary\" onclick=\"previewPoster()\">\n                        <i class=\"fas fa-eye\"></i>Preview\n                    </button>\n                    <button class=\"btn btn-success\" id=\"saveBtn\" onclick=\"savePoster()\">\n                        <i class=\"fas fa-save\"></i>Save Changes\n                    </button>\n                    <a href=\"/poster/gallery\" class=\"btn btn-secondary\">\n                        <i class=\"fas fa-arrow-left\"></i>Back to Gallery\n                    </a>\n                </div>\n            </header>\n\n            <div class=\"canvas-container\">\n                <div class=\"canvas-wrapper\">\n                    <!-- Poster Loading Overlay -->\n                    <div class=\"loading-overlay\" id=\"loadingOverlay\">\n                        <div class=\"spinner\"></div>\n                        <p class=\"loading-text\">Loading your poster...</p>\n                    </div>\n\n                    <!-- The Actual Poster Canvas -->\n                    <canvas id=\"posterCanvas\"></canvas>\n                </div>\n\n                <!-- Canvas Controls -->\n                <div class=\"canvas-controls\">\n                    <button class=\"control-btn\" onclick=\"zoomOut()\" title=\"Zoom Out\">\n                        <i class=\"fas fa-minus\"></i>\n                    </button>\n                    <button class=\"control-btn\" onclick=\"fitToScreen()\" title=\"Fit to Screen\">\n                        <i class=\"fas fa-expand-arrows-alt\"></i>\n                    </button>\n                    <button class=\"control-btn\" onclick=\"zoomIn()\" title=\"Zoom In\">\n                        <i class=\"fas fa-plus\"></i>\n                    </button>\n                </div>\n            </div>\n        </main>\n    </div>\n\n    <!-- Save Form (Hidden) -->\n    <form id=\"saveForm\" method=\"POST\" style=\"display: none;\">\n        <input type=\"hidden\" name=\"canvas_data\" id=\"canvasData\">\n    </form>\n\n    <script>\n        console.log('🎨 Starting Posterly Editor Standalone...');\n\n        // Global variables\n        let canvas = null;\n        let history = [];\n        let historyStep = 0;\n        let currentTool = 'select';\n        let zoomLevel = 1;\n        let backgroundImage = null;\n\n        // Poster data\n        const posterData = {{\n            id: {poster.id},\n            title: \"{poster.title}\",\n            filename: \"{poster.filename}\"\n        }};\n\n        // Wait for DOM to be fully loaded\n        document.addEventListener('DOMContentLoaded', function() {{\n            console.log('📐 DOM loaded, initializing standalone editor...');\n            initializeEditor();\n        }});\n\n        function initializeEditor() {{\n            try {{\n                console.log('🔧 Setting up standalone canvas...');\n                \n                // Create canvas with optimal dimensions\n                const canvasWidth = {width};\n                const canvasHeight = {height};\n                \n                canvas = new fabric.Canvas('posterCanvas', {{\n                    width: canvasWidth,\n                    height: canvasHeight,\n                    backgroundColor: '#ffffff',\n                    preserveObjectStacking: true,\n                    selection: true,\n                    targetFindTolerance: 5,\n                    perPixelTargetFind: true\n                }});\n                \n                console.log('✅ Standalone canvas created:', canvasWidth + 'x' + canvasHeight);\n                \n                // Setup canvas events\n                setupCanvasEvents();\n                \n                // Load the poster image\n                loadPosterImage();\n                \n                // Initialize UI\n                updateToolbar();\n                initializePanels();\n                \n                console.log('🚀 Standalone editor initialization complete');\n                \n            }} catch (error) {{\n                console.error('❌ Standalone editor initialization failed:', error);\n                hideLoading();\n                showMessage('Failed to initialize the editor. Please refresh the page.', 'error');\n            }}\n        }}\n\n        function setupCanvasEvents() {{\n            console.log('🔗 Setting up standalone canvas events...');\n            \n            canvas.on('selection:created', handleSelection);\n            canvas.on('selection:updated', handleSelection);\n            canvas.on('selection:cleared', clearSelection);\n            canvas.on('object:modified', saveState);\n            canvas.on('object:added', updateLayers);\n            canvas.on('object:removed', updateLayers);\n            canvas.on('mouse:down', handleCanvasClick);\n            \n            console.log('✅ Standalone canvas events configured');\n        }}\n\n        function loadPosterImage() {{\n            console.log('🖼️ Loading poster image standalone...');\n            \n            const imageUrl = '/static/uploads/posters/' + posterData.filename;\n            console.log('📂 Image URL:', imageUrl);\n            \n            // Create test image to verify accessibility\n            const testImg = new Image();\n            \n            testImg.onload = function() {{\n                console.log('✅ Test image loaded successfully');\n                console.log('📏 Image dimensions:', testImg.width + 'x' + testImg.height);\n                \n                // Load with Fabric.js\n                fabric.Image.fromURL(imageUrl, function(fabricImg) {{\n                    if (!fabricImg) {{\n                        console.error('❌ Failed to create Fabric image');\n                        hideLoading();\n                        showMessage('Failed to load the poster image.', 'error');\n                        return;\n                    }}\n                    \n                    console.log('✅ Fabric image created successfully');\n                    \n                    try {{\n                        // Calculate optimal scaling\n                        const canvasWidth = canvas.getWidth();\n                        const canvasHeight = canvas.getHeight();\n                        const imgWidth = fabricImg.width;\n                        const imgHeight = fabricImg.height;\n                        \n                        const scaleX = canvasWidth / imgWidth;\n                        const scaleY = canvasHeight / imgHeight;\n                        const scale = Math.min(scaleX, scaleY, 1);\n                        \n                        console.log('📐 Calculated scale:', scale);\n                        \n                        // Configure background image\n                        fabricImg.set({{\n                            scaleX: scale,\n                            scaleY: scale,\n                            left: (canvasWidth - imgWidth * scale) / 2,\n                            top: (canvasHeight - imgHeight * scale) / 2,\n                            selectable: false,\n                            evented: false,\n                            name: 'background-image',\n                            lockMovementX: true,\n                            lockMovementY: true,\n                            lockRotation: true,\n                            lockScalingX: true,\n                            lockScalingY: true,\n                            hoverCursor: 'default',\n                            moveCursor: 'default'\n                        }});\n                        \n                        // Clear canvas and add background\n                        canvas.clear();\n                        canvas.add(fabricImg);\n                        canvas.sendToBack(fabricImg);\n                        canvas.renderAll();\n                        \n                        // Store reference\n                        backgroundImage = fabricImg;\n                        \n                        // Save initial state\n                        saveState();\n                        updateLayers();\n                        \n                        // Hide loading with smooth animation\n                        setTimeout(() => {{\n                            hideLoading();\n                            showMessage('Poster loaded successfully!', 'success');\n                            console.log('🎉 Standalone poster loaded and editor ready!');\n                        }}, 500);\n                        \n                    }} catch (error) {{\n                        console.error('❌ Error configuring image:', error);\n                        hideLoading();\n                        showMessage('Error setting up the poster image.', 'error');\n                    }}\n                    \n                }}, {{\n                    crossOrigin: 'anonymous'\n                }});\n            }};\n            \n            testImg.onerror = function(e) {{\n                console.error('❌ Failed to load test image:', imageUrl, e);\n                hideLoading();\n                showMessage('The poster image could not be found. Please check if the image exists.', 'error');\n            }};\n            \n            // Set loading timeout\n            setTimeout(() => {{\n                const overlay = document.getElementById('loadingOverlay');\n                if (overlay && !overlay.classList.contains('hidden')) {{\n                    console.error('⏰ Image loading timeout');\n                    hideLoading();\n                    showMessage('Image loading timed out. Please check your connection.', 'error');\n                }}\n            }}, 15000);\n            \n            testImg.src = imageUrl;\n        }}\n\n        function hideLoading() {{\n            const loadingOverlay = document.getElementById('loadingOverlay');\n            if (loadingOverlay) {{\n                loadingOverlay.classList.add('hidden');\n            }}\n        }}\n\n        function showMessage(message, type = 'success') {{\n            // Remove existing messages\n            const existingMessages = document.querySelectorAll('.message');\n            existingMessages.forEach(msg => msg.remove());\n            \n            // Create new message\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `message ${{type}}`;\n            messageDiv.innerHTML = `\n                <i class=\"fas fa-${{type === 'success' ? 'check' : 'exclamation-triangle'}}\"></i>\n                ${{message}}\n            `;\n            \n            document.body.appendChild(messageDiv);\n            \n            // Auto-remove after delay\n            setTimeout(() => {{\n                messageDiv.remove();\n            }}, 5000);\n        }}\n\n        // Panel management\n        function initializePanels() {{\n            // Open the first panel by default\n            const firstPanel = document.querySelector('.panel-header');\n            if (firstPanel) {{\n                togglePanel(firstPanel);\n            }}\n        }}\n\n        function togglePanel(header) {{\n            const content = header.nextElementSibling;\n            const icon = header.querySelector('.toggle-icon');\n            \n            // Toggle content\n            if (content.classList.contains('active')) {{\n                content.classList.remove('active');\n                content.style.display = 'none';\n                header.classList.remove('active');\n                icon.classList.remove('fa-chevron-up');\n                icon.classList.add('fa-chevron-down');\n            }} else {{\n                content.classList.add('active');\n                content.style.display = 'block';\n                header.classList.add('active');\n                icon.classList.remove('fa-chevron-down');\n                icon.classList.add('fa-chevron-up');\n            }}\n        }}\n\n        // Tool management\n        function setTool(tool) {{\n            currentTool = tool;\n            updateToolbar();\n            \n            // Configure canvas for the tool\n            switch(tool) {{\n                case 'select':\n                    canvas.isDrawingMode = false;\n                    canvas.selection = true;\n                    canvas.defaultCursor = 'default';\n                    break;\n                case 'text':\n                    canvas.isDrawingMode = false;\n                    canvas.selection = false;\n                    canvas.defaultCursor = 'text';\n                    break;\n                default:\n                    canvas.isDrawingMode = false;\n                    canvas.selection = false;\n                    canvas.defaultCursor = 'crosshair';\n            }}\n            \n            canvas.renderAll();\n        }}\n\n        function updateToolbar() {{\n            // Update active tool button\n            document.querySelectorAll('.tool-btn').forEach(btn => {{\n                btn.classList.remove('active');\n            }});\n            \n            const toolBtn = document.getElementById(currentTool + 'Tool');\n            if (toolBtn) {{\n                toolBtn.classList.add('active');\n            }}\n        }}\n\n        function handleCanvasClick(options) {{\n            if (currentTool === 'text') {{\n                const pointer = canvas.getPointer(options.e);\n                addText(pointer.x, pointer.y);\n            }}\n        }}\n\n        // Object creation functions\n        function addText(x, y) {{\n            const text = new fabric.Textbox('Click to edit text', {{\n                left: x - 75,\n                top: y - 15,\n                width: 200,\n                fontSize: 32,\n                fill: '#4A90E2',\n                fontFamily: 'Arial',\n                fontWeight: '600',\n                name: 'text-' + Date.now(),\n                cornerStyle: 'circle',\n                borderColor: '#4A90E2',\n                cornerColor: '#4A90E2'\n            }});\n            \n            canvas.add(text);\n            canvas.setActiveObject(text);\n            setTool('select');\n            saveState();\n        }}\n\n        function addRectangle() {{\n            const rect = new fabric.Rect({{\n                left: 100,\n                top: 100,\n                width: 150,\n                height: 100,\n                fill: '#4A90E2',\n                stroke: '#357ABD',\n                strokeWidth: 2,\n                rx: 10,\n                ry: 10,\n                name: 'rectangle-' + Date.now(),\n                cornerStyle: 'circle',\n                borderColor: '#4A90E2',\n                cornerColor: '#4A90E2'\n            }});\n            \n            canvas.add(rect);\n            canvas.setActiveObject(rect);\n            saveState();\n        }}\n\n        function addCircle() {{\n            const circle = new fabric.Circle({{\n                left: 100,\n                top: 100,\n                radius: 60,\n                fill: '#50E3C2',\n                stroke: '#4A90E2',\n                strokeWidth: 2,\n                name: 'circle-' + Date.now(),\n                cornerStyle: 'circle',\n                borderColor: '#4A90E2',\n                cornerColor: '#4A90E2'\n            }});\n            \n            canvas.add(circle);\n            canvas.setActiveObject(circle);\n            saveState();\n        }}\n\n        // Shape menu\n        function showShapesMenu(btn) {{\n            const menu = document.createElement('div');\n            menu.style.cssText = `\n                position: absolute;\n                background: var(--panel-dark);\n                border: 1px solid var(--border-color);\n                border-radius: 8px;\n                box-shadow: var(--shadow-lg);\n                padding: 12px;\n                z-index: 1000;\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n                min-width: 150px;\n            `;\n            \n            const shapes = [\n                {{ icon: 'fas fa-square', action: 'addRectangle', title: 'Rectangle' }},\n                {{ icon: 'fas fa-circle', action: 'addCircle', title: 'Circle' }}\n            ];\n            \n            shapes.forEach(shape => {{\n                const shapeBtn = document.createElement('button');\n                shapeBtn.className = 'tool-btn';\n                shapeBtn.innerHTML = `<i class=\"${{shape.icon}}\"></i><span>${{shape.title}}</span>`;\n                shapeBtn.onclick = function() {{\n                    window[shape.action]();\n                    document.body.removeChild(menu);\n                }};\n                menu.appendChild(shapeBtn);\n            }});\n            \n            const rect = btn.getBoundingClientRect();\n            menu.style.left = (rect.right + 10) + 'px';\n            menu.style.top = rect.top + 'px';\n            \n            document.body.appendChild(menu);\n            \n            // Remove menu when clicking outside\n            setTimeout(() => {{\n                document.addEventListener('click', function removeMenu(e) {{\n                    if (!menu.contains(e.target) && e.target !== btn) {{\n                        if (document.body.contains(menu)) {{\n                            document.body.removeChild(menu);\n                        }}\n                        document.removeEventListener('click', removeMenu);\n                    }}\n                }});\n            }}, 10);\n        }}\n\n        // Layer management\n        function updateLayers() {{\n            const layersPanel = document.getElementById('layersPanel');\n            const objects = canvas.getObjects().slice().reverse();\n            \n            let html = '';\n            objects.forEach((obj, index) => {{\n                const actualIndex = objects.length - index - 1;\n                const name = obj.name || obj.type + ' ' + (actualIndex + 1);\n                const isSelected = canvas.getActiveObject() === obj;\n                const isVisible = obj.visible !== false;\n                \n                html += `\n                    <div class=\"layer-item ${{isSelected ? 'active' : ''}}\" onclick=\"selectLayer(${{actualIndex}})\">\n                        <div class=\"layer-name\">${{name}}</div>\n                        <div class=\"layer-controls\">\n                            <button class=\"layer-control-btn\" onclick=\"event.stopPropagation(); toggleLayerVisibility(${{actualIndex}})\" title=\"Toggle Visibility\">\n                                <i class=\"fas fa-eye${{isVisible ? '' : '-slash'}}\"></i>\n                            </button>\n                            ${{obj.name !== 'background-image' ? `<button class=\"layer-control-btn\" onclick=\"event.stopPropagation(); deleteLayer(${{actualIndex}})\" title=\"Delete Layer\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>` : ''}}\n                        </div>\n                    </div>\n                `;\n            }});\n            \n            layersPanel.innerHTML = html || '<p style=\"color: var(--text-light); opacity: 0.7; font-size: 14px;\">No layers</p>';\n        }}\n\n        function selectLayer(index) {{\n            const objects = canvas.getObjects();\n            const obj = objects[index];\n            if (obj) {{\n                canvas.setActiveObject(obj);\n                canvas.renderAll();\n            }}\n        }}\n\n        function toggleLayerVisibility(index) {{\n            const objects = canvas.getObjects();\n            const obj = objects[index];\n            if (obj) {{\n                obj.set('visible', !obj.visible);\n                canvas.renderAll();\n                updateLayers();\n            }}\n        }}\n\n        function deleteLayer(index) {{\n            const objects = canvas.getObjects();\n            const obj = objects[index];\n            if (obj && obj.name !== 'background-image') {{\n                canvas.remove(obj);\n                saveState();\n            }}\n        }}\n\n        // Selection handling\n        function handleSelection() {{\n            updatePropertiesPanel();\n            updateLayers();\n        }}\n\n        function clearSelection() {{\n            clearPropertiesPanel();\n            updateLayers();\n        }}\n\n        // Properties panel\n        function updatePropertiesPanel() {{\n            const activeObject = canvas.getActiveObject();\n            const panel = document.getElementById('propertiesPanel');\n            \n            if (!activeObject || activeObject.name === 'background-image') {{\n                clearPropertiesPanel();\n                return;\n            }}\n            \n            let html = '';\n            \n            // Position properties\n            html += `\n                <div class=\"property-group\">\n                    <label class=\"property-label\">Position</label>\n                    <div class=\"property-row\">\n                        <input type=\"number\" class=\"property-input\" placeholder=\"X\" value=\"${{Math.round(activeObject.left)}}\" onchange=\"updateObjectProperty('left', this.value)\">\n                        <input type=\"number\" class=\"property-input\" placeholder=\"Y\" value=\"${{Math.round(activeObject.top)}}\" onchange=\"updateObjectProperty('top', this.value)\">\n                    </div>\n                </div>\n            `;\n            \n            // Text-specific properties\n            if (activeObject.type === 'textbox' || activeObject.type === 'text') {{\n                html += `\n                    <div class=\"property-group\">\n                        <label class=\"property-label\">Font Size</label>\n                        <input type=\"number\" class=\"property-input\" value=\"${{activeObject.fontSize}}\" onchange=\"updateObjectProperty('fontSize', this.value)\">\n                    </div>\n                    <div class=\"property-group\">\n                        <label class=\"property-label\">Text Color</label>\n                        <input type=\"color\" class=\"color-picker\" value=\"${{activeObject.fill}}\" onchange=\"updateObjectProperty('fill', this.value)\">\n                    </div>\n                `;\n            }}\n            \n            // Shape-specific properties\n            if (activeObject.type === 'rect' || activeObject.type === 'circle') {{\n                html += `\n                    <div class=\"property-group\">\n                        <label class=\"property-label\">Fill Color</label>\n                        <input type=\"color\" class=\"color-picker\" value=\"${{activeObject.fill}}\" onchange=\"updateObjectProperty('fill', this.value)\">\n                    </div>\n                `;\n            }}\n            \n            panel.innerHTML = html;\n        }}\n\n        function clearPropertiesPanel() {{\n            document.getElementById('propertiesPanel').innerHTML = '<p style=\"color: var(--text-light); opacity: 0.7; font-size: 14px;\">Select an object to edit its properties.</p>';\n        }}\n\n        function updateObjectProperty(property, value) {{\n            const activeObject = canvas.getActiveObject();\n            if (!activeObject) return;\n            \n            const numValue = parseFloat(value);\n            activeObject.set(property, isNaN(numValue) ? value : numValue);\n            canvas.renderAll();\n            saveState();\n        }}\n\n        // Action functions - ALL DEFINED HERE\n        function deleteSelected() {{\n            const activeObjects = canvas.getActiveObjects();\n            if (activeObjects.length) {{\n                const filteredObjects = activeObjects.filter(obj => obj.name !== 'background-image');\n                if (filteredObjects.length > 0) {{\n                    canvas.remove(...filteredObjects);\n                    canvas.discardActiveObject();\n                    saveState();\n                }}\n            }}\n        }}\n\n        function duplicateSelected() {{\n            const activeObject = canvas.getActiveObject();\n            if (activeObject && activeObject.name !== 'background-image') {{\n                activeObject.clone(function(cloned) {{\n                    cloned.set({{\n                        left: cloned.left + 20,\n                        top: cloned.top + 20,\n                        name: activeObject.name.replace(/\\\\d+$/, '') + Date.now()\n                    }});\n                    canvas.add(cloned);\n                    canvas.setActiveObject(cloned);\n                    saveState();\n                }});\n            }}\n        }}\n\n        // History management\n        function saveState() {{\n            if (!canvas) return;\n            \n            if (historyStep < history.length - 1) {{\n                history = history.slice(0, historyStep + 1);\n            }}\n            \n            const state = JSON.stringify(canvas.toJSON());\n            history.push(state);\n            historyStep = history.length - 1;\n            \n            // Limit history size\n            if (history.length > 50) {{\n                history.shift();\n                historyStep--;\n            }}\n        }}\n\n        function undoAction() {{\n            if (historyStep > 0) {{\n                historyStep--;\n                const state = history[historyStep];\n                canvas.loadFromJSON(state, function() {{\n                    canvas.renderAll();\n                    updateLayers();\n                    updatePropertiesPanel();\n                    backgroundImage = canvas.getObjects().find(obj => obj.name === 'background-image');\n                }});\n            }}\n        }}\n\n        function redoAction() {{\n            if (historyStep < history.length - 1) {{\n                historyStep++;\n                const state = history[historyStep];\n                canvas.loadFromJSON(state, function() {{\n                    canvas.renderAll();\n                    updateLayers();\n                    updatePropertiesPanel();\n                    backgroundImage = canvas.getObjects().find(obj => obj.name === 'background-image');\n                }});\n            }}\n        }}\n\n        // Zoom functions\n        function zoomIn() {{\n            zoomLevel = Math.min(zoomLevel * 1.2, 5);\n            canvas.setZoom(zoomLevel);\n        }}\n\n        function zoomOut() {{\n            zoomLevel = Math.max(zoomLevel / 1.2, 0.1);\n            canvas.setZoom(zoomLevel);\n        }}\n\n        function fitToScreen() {{\n            zoomLevel = 1;\n            canvas.setZoom(zoomLevel);\n            canvas.setViewportTransform([1, 0, 0, 1, 0, 0]);\n        }}\n\n        // Export functions\n        function exportAs(format) {{\n            try {{\n                if (!canvas) {{\n                    showMessage('Canvas not initialized', 'error');\n                    return;\n                }}\n                \n                const dataURL = canvas.toDataURL({{\n                    format: format === 'jpg' ? 'jpeg' : format,\n                    quality: 0.95,\n                    multiplier: 2\n                }});\n                \n                if (format === 'pdf') {{\n                    const {{ jsPDF }} = window.jspdf;\n                    const pdf = new jsPDF({{\n                        orientation: canvas.width > canvas.height ? 'landscape' : 'portrait',\n                        unit: 'px',\n                        format: [canvas.width, canvas.height]\n                    }});\n                    \n                    pdf.addImage(dataURL, 'PNG', 0, 0, canvas.width, canvas.height);\n                    pdf.save(`${{posterData.title || 'poster'}}.pdf`);\n                }} else {{\n                    const link = document.createElement('a');\n                    link.download = `${{posterData.title || 'poster'}}.${{format}}`;\n                    link.href = dataURL;\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                }}\n                \n                showMessage(`Successfully exported as ${{format.toUpperCase()}}!`, 'success');\n                \n            }} catch (error) {{\n                console.error('Export error:', error);\n                showMessage('Failed to export image. Please try again.', 'error');\n            }}\n        }}\n\n        // Save poster\n        function savePoster() {{\n            try {{\n                if (!canvas || canvas.getObjects().length === 0) {{\n                    showMessage('Canvas is empty. Please add some content before saving.', 'error');\n                    return;\n                }}\n                \n                const saveBtn = document.getElementById('saveBtn');\n                const originalText = saveBtn.innerHTML;\n                saveBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i>Saving...';\n                saveBtn.disabled = true;\n                \n                const dataURL = canvas.toDataURL('image/png', 1.0);\n                \n                if (!dataURL || dataURL.length < 100) {{\n                    throw new Error('Generated image data is invalid');\n                }}\n                \n                document.getElementById('canvasData').value = dataURL;\n                document.getElementById('saveForm').submit();\n                \n                showMessage('Poster saved successfully!', 'success');\n                \n            }} catch (error) {{\n                console.error('Save error:', error);\n                showMessage('Failed to save poster. Please try again.', 'error');\n                \n                const saveBtn = document.getElementById('saveBtn');\n                saveBtn.innerHTML = '<i class=\"fas fa-save\"></i>Save Changes';\n                saveBtn.disabled = false;\n            }}\n        }}\n\n        function previewPoster() {{\n            window.open('/poster/{poster.id}', '_blank');\n        }}\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', function(e) {{\n            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.tagName === 'SELECT') {{\n                return;\n            }}\n            \n            if (e.ctrlKey || e.metaKey) {{\n                switch(e.key) {{\n                    case 'z':\n                        e.preventDefault();\n                        if (e.shiftKey) {{\n                            redoAction();\n                        }} else {{\n                            undoAction();\n                        }}\n                        break;\n                    case 's':\n                        e.preventDefault();\n                        savePoster();\n                        break;\n                    case 'd':\n                        e.preventDefault();\n                        duplicateSelected();\n                        break;\n                }}\n            }}\n            \n            if (e.key === 'Delete' || e.key === 'Backspace') {{\n                e.preventDefault();\n                deleteSelected();\n            }}\n        }});\n\n        // Responsive handling\n        window.addEventListener('resize', function() {{\n            if (canvas) {{\n                canvas.renderAll();\n            }}\n        }});\n\n        console.log('🎨 Posterly Standalone Editor script loaded and ready!');\n    </script>\n</body>\n</html>'''\n    \n    return Response(html_template, mimetype='text/html')\n\n# Create blueprints\nmain_bp = Blueprint('main', __name__)\nauth_bp = Blueprint('auth', __name__)\nposter_bp = Blueprint('poster', __name__)\nprofile_bp = Blueprint('profile', __name__)\nsubscription_bp = Blueprint('subscription', __name__)\npayment_bp = Blueprint('payment', __name__, url_prefix='/payment')\n\n# Main routes\n@main_bp.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    return render_template('index.html')\n\n@main_bp.route('/dashboard')\n@login_required\ndef dashboard():\n    # Master admin bypasses profile completion requirement\n    if not current_user.profile_completed and not current_user.is_master_admin:\n        flash('Please complete your profile to start generating posters.', 'info')\n        return redirect(url_for('profile.setup'))\n    \n    # Get user's recent posters\n    recent_posters = Poster.query.filter_by(user_id=current_user.id)\\\n                                 .order_by(desc(Poster.created_at))\\\n                                 .limit(6).all()\n    \n    # Get poster statistics for current user\n    total_posters = Poster.query.filter_by(user_id=current_user.id).count()\n    from datetime import datetime, timedelta\n    week_ago = datetime.utcnow() - timedelta(days=7)\n    weekly_posters = Poster.query.filter(\n        Poster.user_id == current_user.id,\n        Poster.created_at >= week_ago\n    ).count()\n    \n    # Admin dashboard features for master admin\n    admin_stats = {}\n    if current_user.is_master_admin:\n        admin_stats = {\n            'total_users': User.query.filter_by(is_master_admin=False).count(),\n            'total_all_posters': Poster.query.count(),\n            'premium_users': User.query.filter_by(is_premium=True, is_master_admin=False).count()\n        }\n    \n    return render_template('dashboard.html', \n                         recent_posters=recent_posters,\n                         total_posters=total_posters,\n                         weekly_posters=weekly_posters,\n                         is_admin=current_user.is_master_admin,\n                         admin_stats=admin_stats)\n\n# Authentication routes\ndef authenticate_master_admin(username, password):\n    \"\"\"\n    MASTER ADMIN LOGIN - For internal testing and admin access\n    Credentials: admin@posterly.ai / MasterKey#2025\n    This bypasses all usage limits and provides unlimited access\n    \"\"\"\n    MASTER_USERNAME = \"admin@posterly.ai\"\n    MASTER_PASSWORD = \"MasterKey#2025\"\n    \n    return username == MASTER_USERNAME and password == MASTER_PASSWORD\n\ndef get_or_create_master_admin():\n    \"\"\"\n    Get or create the master admin user in the database\n    This user is flagged as is_master_admin=True and has unlimited access\n    \"\"\"\n    MASTER_EMAIL = \"admin@posterly.ai\"\n    MASTER_USERNAME = \"posterly_admin\"\n    \n    # Check if master admin already exists\n    master_user = User.query.filter_by(email=MASTER_EMAIL).first()\n    \n    if not master_user:\n        # Create master admin user\n        master_user = User()\n        master_user.username = MASTER_USERNAME\n        master_user.email = MASTER_EMAIL\n        master_user.full_name = \"Master Administrator\"\n        master_user.business_name = \"Posterly Internal\"\n        master_user.is_premium = True\n        master_user.is_master_admin = True  # This is the key flag for unlimited access\n        master_user.profile_completed = True\n        master_user.set_password(\"MasterKey#2025\")\n        db.session.add(master_user)\n        db.session.commit()\n        print(\"Created master admin user for internal testing\")\n    \n    return master_user\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    form = LoginForm()\n    # For master admin testing, bypass form validation\n    if request.method == 'POST':\n        print(f\"Login attempt: username={request.form.get('username')}, password_present={bool(request.form.get('password'))}\")\n        \n        # Check if this is a master admin login attempt\n        username = request.form.get('username') or form.username.data\n        password = request.form.get('password') or form.password.data\n        \n        if authenticate_master_admin(username, password):\n            # Get or create master admin user\n            user = get_or_create_master_admin()\n            login_user(user, remember=True)\n            flash(f'Master admin logged in successfully: {user.email}', 'success')\n            print(f\"Master admin logged in: {user.email}\")\n            return redirect(url_for('main.dashboard'))\n        \n        if form.validate_on_submit():\n            # Regular user authentication\n            user = User.query.filter_by(username=form.username.data).first()\n            if user and user.check_password(form.password.data):\n                login_user(user, remember=form.remember_me.data)\n                next_page = request.args.get('next')\n                if not next_page or not next_page.startswith('/'):\n                    next_page = url_for('main.dashboard')\n                return redirect(next_page)\n            flash('Invalid username or password', 'danger')\n    \n    return render_template('login.html', form=form)\n\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    form = RegistrationForm()\n    if form.validate_on_submit():\n        # Check if username or email already exists\n        if User.query.filter_by(username=form.username.data).first():\n            flash('Username already exists. Please choose a different one.', 'danger')\n            return render_template('register.html', form=form)\n        \n        if User.query.filter_by(email=form.email.data).first():\n            flash('Email already registered. Please use a different email.', 'danger')\n            return render_template('register.html', form=form)\n        \n        # Create new user\n        user = User()\n        user.username = form.username.data\n        user.email = form.email.data\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        \n        login_user(user)\n        flash('Registration successful! Please complete your profile.', 'success')\n        return redirect(url_for('profile.setup'))\n    \n    return render_template('register.html', form=form)\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('You have been logged out successfully.', 'info')\n    return redirect(url_for('main.index'))\n\n# Profile routes\n@profile_bp.route('/setup', methods=['GET', 'POST'])\n@login_required\ndef setup():\n    if current_user.profile_completed:\n        return redirect(url_for('main.dashboard'))\n    \n    form = ProfileSetupForm()\n    if form.validate_on_submit():\n        # Update user profile\n        current_user.full_name = form.full_name.data\n        current_user.phone = form.phone.data\n        current_user.address = form.address.data\n        current_user.business_name = form.business_name.data\n        current_user.website = form.website.data\n        current_user.facebook = form.facebook.data\n        current_user.instagram = form.instagram.data\n        current_user.twitter = form.twitter.data\n        current_user.linkedin = form.linkedin.data\n        current_user.profile_completed = True\n        \n        # Handle logo upload\n        if form.logo.data:\n            upload_folder = os.path.join('static', 'uploads', 'logos')\n            filename = save_uploaded_file(form.logo.data, upload_folder)\n            if filename:\n                current_user.logo_filename = filename\n        \n        db.session.commit()\n        flash('Profile completed successfully!', 'success')\n        return redirect(url_for('main.dashboard'))\n    \n    return render_template('profile_setup.html', form=form)\n\n@profile_bp.route('/manage', methods=['GET', 'POST'])\n@login_required\ndef manage():\n    form = ProfileEditForm()\n    \n    if request.method == 'GET':\n        # Pre-populate form with current data\n        form.full_name.data = current_user.full_name\n        form.phone.data = current_user.phone\n        form.address.data = current_user.address\n        form.business_name.data = current_user.business_name\n        form.website.data = current_user.website\n        form.facebook.data = current_user.facebook\n        form.instagram.data = current_user.instagram\n        form.twitter.data = current_user.twitter\n        form.linkedin.data = current_user.linkedin\n    \n    if form.validate_on_submit():\n        # Update user profile\n        current_user.full_name = form.full_name.data\n        current_user.phone = form.phone.data\n        current_user.address = form.address.data\n        current_user.business_name = form.business_name.data\n        current_user.website = form.website.data\n        current_user.facebook = form.facebook.data\n        current_user.instagram = form.instagram.data\n        current_user.twitter = form.twitter.data\n        current_user.linkedin = form.linkedin.data\n        \n        # Handle logo upload\n        if form.logo.data:\n            upload_folder = os.path.join('static', 'uploads', 'logos')\n            filename = save_uploaded_file(form.logo.data, upload_folder)\n            if filename:\n                current_user.logo_filename = filename\n        \n        db.session.commit()\n        flash('Profile updated successfully!', 'success')\n        return redirect(url_for('profile.manage'))\n    \n    return render_template('profile_management.html', form=form)\n\n# Poster routes\n@poster_bp.route('/generate', methods=['GET', 'POST'])\n@login_required\ndef generate():\n    # Master admin bypasses profile completion requirement\n    if not current_user.profile_completed and not current_user.is_master_admin:\n        flash('Please complete your profile first.', 'warning')\n        return redirect(url_for('profile.setup'))\n    \n    # Check usage limits (master admin gets unlimited access)\n    if not current_user.has_unlimited_access():\n        poster_count = Poster.query.filter_by(user_id=current_user.id).count()\n        if poster_count >= 3:  # Free user limit\n            flash('You have reached the free plan limit of 3 posters. Please upgrade to continue.', 'warning')\n            return redirect(url_for('subscription.pricing'))\n    \n    form = PosterGenerationForm()\n    if form.validate_on_submit():\n        # Validate prompt\n        is_valid, result = validate_prompt(form.prompt.data)\n        if not is_valid:\n            flash(f'Error: {result}', 'danger')\n            return render_template('generate_poster.html', form=form)\n        \n        sanitized_prompt = result\n        \n        # Generate poster\n        filename = generate_filename('.jpg')\n        temp_path = os.path.join('static', 'uploads', 'temp_' + filename)\n        final_path = os.path.join('static', 'uploads', 'posters', filename)\n        \n        # Ensure directories exist\n        os.makedirs(os.path.dirname(temp_path), exist_ok=True)\n        os.makedirs(os.path.dirname(final_path), exist_ok=True)\n        \n        # Generate base image with Gemini\n        if not generate_poster_image(sanitized_prompt, temp_path):\n            flash('Error generating poster. Please try again.', 'danger')\n            return render_template('generate_poster.html', form=form)\n        \n        # Add profile overlay\n        selected_fields = form.get_selected_fields()\n        profile_data = current_user.get_profile_fields()\n        \n        overlay_path = os.path.join('static', 'uploads', 'overlay_' + filename)\n        if not add_profile_overlay(temp_path, overlay_path, profile_data, selected_fields):\n            flash('Error adding profile information to poster.', 'warning')\n            overlay_path = temp_path\n        \n        # Add watermark based on subscription (master admin gets watermark-free)\n        if not add_watermark(overlay_path, final_path, current_user.has_unlimited_access()):\n            flash('Error processing poster. Please try again.', 'danger')\n            return render_template('generate_poster.html', form=form)\n        \n        # Save poster record\n        poster = Poster()\n        poster.title = form.title.data\n        poster.prompt = sanitized_prompt\n        poster.filename = filename\n        poster.user_id = current_user.id\n        poster.is_public = form.is_public.data\n        poster.has_watermark = not current_user.has_unlimited_access()\n        poster.set_displayed_fields(selected_fields)\n        \n        db.session.add(poster)\n        db.session.commit()\n        \n        # Clean up temporary files\n        try:\n            if os.path.exists(temp_path):\n                os.remove(temp_path)\n            if overlay_path != temp_path and os.path.exists(overlay_path):\n                os.remove(overlay_path)\n        except:\n            pass\n        \n        flash('Poster generated successfully!', 'success')\n        return redirect(url_for('poster.view', poster_id=poster.id))\n    \n    return render_template('generate_poster.html', form=form)\n\n@poster_bp.route('/gallery')\n@login_required\ndef gallery():\n    page = request.args.get('page', 1, type=int)\n    posters = Poster.query.filter_by(user_id=current_user.id)\\\n                          .order_by(desc(Poster.created_at))\\\n                          .paginate(page=page, per_page=12, error_out=False)\n    \n    return render_template('poster_gallery.html', posters=posters)\n\n@poster_bp.route('/<int:poster_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit(poster_id):\n    \"\"\"\n    CRITICAL: Poster editing route - handles canvas operations and prevents crashes\n    This route must handle all poster editing operations smoothly for production\n    \"\"\"\n    poster = Poster.query.get_or_404(poster_id)\n    \n    # Check permissions\n    if poster.user_id != current_user.id:\n        flash('You do not have permission to edit this poster.', 'danger')\n        return redirect(url_for('poster.gallery'))\n    \n    try:\n        # Ensure poster file exists and validate\n        poster_path = os.path.join('static', 'uploads', 'posters', poster.filename)\n        if not os.path.exists(poster_path):\n            logging.error(f\"Poster file not found: {poster_path}\")\n            flash('Poster file not found. Please regenerate the poster.', 'danger')\n            return redirect(url_for('poster.gallery'))\n        \n        # Validate that the file is actually an image\n        try:\n            from PIL import Image\n            with Image.open(poster_path) as test_img:\n                if test_img.size[0] == 0 or test_img.size[1] == 0:\n                    raise ValueError(\"Invalid image dimensions\")\n        except Exception as e:\n            logging.error(f\"Invalid poster image file: {e}\")\n            flash('Poster file is corrupted. Please regenerate the poster.', 'danger')\n            return redirect(url_for('poster.gallery'))\n        \n        if request.method == 'POST':\n            # Handle canvas save operations\n            canvas_data = request.form.get('canvas_data')\n            if canvas_data and canvas_data.startswith('data:image'):\n                try:\n                    # Parse base64 image data\n                    import base64\n                    import io\n                    from PIL import Image\n                    \n                    # Extract base64 data\n                    header, data = canvas_data.split(',', 1)\n                    image_data = base64.b64decode(data)\n                    \n                    # Create new filename for edited version\n                    edited_filename = f\"edited_{generate_filename('.png')}\"\n                    edited_path = os.path.join('static', 'uploads', 'posters', edited_filename)\n                    \n                    # Ensure directory exists\n                    os.makedirs(os.path.dirname(edited_path), exist_ok=True)\n                    \n                    # Save the edited image\n                    with open(edited_path, 'wb') as f:\n                        f.write(image_data)\n                    \n                    # Update poster record with new filename\n                    poster.filename = edited_filename\n                    poster.updated_at = db.func.now()\n                    db.session.commit()\n                    \n                    flash('Poster saved successfully!', 'success')\n                    return redirect(url_for('poster.view', poster_id=poster.id))\n                    \n                except Exception as e:\n                    print(f\"Error saving edited poster: {str(e)}\")\n                    flash('Error saving poster. Please try again.', 'danger')\n            else:\n                flash('Invalid canvas data received.', 'danger')\n        \n        # Get poster dimensions for canvas initialization\n        try:\n            from PIL import Image\n            with Image.open(poster_path) as img:\n                width, height = img.size\n        except:\n            width, height = 800, 600  # Default fallback\n        \n        # Return standalone editor without Bootstrap interference\n        return render_standalone_editor(poster, width, height)\n                             \n    except Exception as e:\n        print(f\"Error in poster edit route: {str(e)}\")\n        flash('An error occurred while loading the editor. Please try again.', 'danger')\n        return redirect(url_for('poster.gallery'))\n\n@poster_bp.route('/<int:poster_id>')\n@login_required\ndef view(poster_id):\n    poster = Poster.query.get_or_404(poster_id)\n    \n    # Check permissions\n    if poster.user_id != current_user.id and not poster.is_public:\n        flash('You do not have permission to view this poster.', 'danger')\n        return redirect(url_for('poster.gallery'))\n    \n    return render_template('poster_view.html', poster=poster)\n\n@poster_bp.route('/<int:poster_id>/delete', methods=['POST'])\n@login_required\ndef delete(poster_id):\n    poster = Poster.query.get_or_404(poster_id)\n    \n    # Check permissions\n    if poster.user_id != current_user.id:\n        flash('You do not have permission to delete this poster.', 'danger')\n        return redirect(url_for('poster.gallery'))\n    \n    # Delete file\n    try:\n        file_path = os.path.join('static', 'uploads', 'posters', poster.filename)\n        if os.path.exists(file_path):\n            os.remove(file_path)\n    except:\n        pass\n    \n    # Delete from database\n    db.session.delete(poster)\n    db.session.commit()\n    \n    flash('Poster deleted successfully.', 'success')\n    return redirect(url_for('poster.gallery'))\n\n@poster_bp.route('/<int:poster_id>/make-public', methods=['POST'])\n@login_required\ndef make_public(poster_id):\n    poster = Poster.query.get_or_404(poster_id)\n    \n    # Check permissions\n    if poster.user_id != current_user.id:\n        return jsonify({'success': False, 'error': 'Permission denied'})\n    \n    poster.is_public = True\n    db.session.commit()\n    \n    return jsonify({'success': True})\n\n@poster_bp.route('/<int:poster_id>/make-private', methods=['POST'])\n@login_required\ndef make_private(poster_id):\n    poster = Poster.query.get_or_404(poster_id)\n    \n    # Check permissions\n    if poster.user_id != current_user.id:\n        return jsonify({'success': False, 'error': 'Permission denied'})\n    \n    poster.is_public = False\n    db.session.commit()\n    \n    return jsonify({'success': True})\n\n@poster_bp.route('/public')\ndef public_gallery():\n    page = request.args.get('page', 1, type=int)\n    posters = Poster.query.filter_by(is_public=True)\\\n                          .order_by(desc(Poster.created_at))\\\n                          .paginate(page=page, per_page=12, error_out=False)\n    \n    return render_template('poster_gallery.html', posters=posters, public=True)\n\n# Subscription routes\n\n\n# Payment and Subscription Routes\n@payment_bp.route('/plans')\n@login_required\ndef plans():\n    \"\"\"Display subscription plans\"\"\"\n    plans = StripeService.PLANS\n    current_plan = current_user.get_subscription_plan()\n    return render_template('subscription_plans.html', plans=plans, current_plan=current_plan)\n\n@payment_bp.route('/checkout/<plan_id>')\n@login_required\ndef checkout(plan_id):\n    \"\"\"Create checkout session for selected plan\"\"\"\n    try:\n        session = StripeService.create_checkout_session(plan_id, current_user.id)\n        return redirect(session.url, code=303)\n    except Exception as e:\n        flash(f'Error creating checkout session: {str(e)}', 'danger')\n        return redirect(url_for('payment.plans'))\n\n@payment_bp.route('/success')\n@login_required\ndef success():\n    \"\"\"Handle successful payment\"\"\"\n    session_id = request.args.get('session_id')\n    if session_id:\n        flash('Subscription activated successfully! Welcome to Premium!', 'success')\n    return redirect(url_for('main.dashboard'))\n\n@payment_bp.route('/cancel')\n@login_required\ndef cancel():\n    \"\"\"Handle canceled payment\"\"\"\n    flash('Checkout canceled. You can upgrade anytime.', 'info')\n    return redirect(url_for('payment.plans'))\n\n@payment_bp.route('/portal')\n@login_required\ndef portal():\n    \"\"\"Redirect to Stripe customer portal\"\"\"\n    if current_user.subscription and current_user.subscription.stripe_customer_id:\n        try:\n            session = StripeService.create_customer_portal_session(\n                current_user.subscription.stripe_customer_id\n            )\n            return redirect(session.url, code=303)\n        except Exception as e:\n            flash(f'Error accessing billing portal: {str(e)}', 'danger')\n    else:\n        flash('No active subscription found.', 'info')\n    \n    return redirect(url_for('profile.manage'))\n\n@payment_bp.route('/webhook', methods=['POST'])\ndef webhook():\n    \"\"\"Handle Stripe webhooks\"\"\"\n    payload = request.get_data()\n    sig_header = request.headers.get('Stripe-Signature')\n    \n    try:\n        result = StripeService.handle_webhook(payload, sig_header)\n        if result['status'] == 'success':\n            return 'Success', 200\n        else:\n            return f\"Error: {result.get('message', 'Unknown error')}\", 400\n    except Exception as e:\n        logging.error(f\"Webhook error: {str(e)}\")\n        return 'Error', 400\n\n# Legacy subscription routes (for backward compatibility)\n@subscription_bp.route('/plans')\n@login_required\ndef old_plans():\n    return redirect(url_for('payment.plans'))\n\n@subscription_bp.route('/checkout')\n@login_required\ndef old_checkout():\n    return redirect(url_for('payment.plans'))\n\n# Static file routes\n@main_bp.route('/uploads/<path:filename>')\ndef uploaded_file(filename):\n    return send_from_directory('static/uploads', filename)\n","size_bytes":73362},"simple_fastapi.py":{"content":"import os\nimport logging\nfrom fastapi import FastAPI, Depends, HTTPException, Request, Form, File, UploadFile, status\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\nfrom sqlalchemy import create_engine, desc\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom models_fastapi import User, Poster, Base\nfrom typing import Optional\nimport uvicorn\nfrom datetime import datetime, timedelta\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nimport json\nimport uuid\nimport base64\nfrom io import BytesIO\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Password context\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# JWT Configuration\nSECRET_KEY = os.environ.get(\"SESSION_SECRET\", \"fallback-secret-key-for-dev\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n# Database configuration\nDATABASE_URL = os.environ.get(\"DATABASE_URL\", \"sqlite:///./posterly.db\")\nif DATABASE_URL.startswith(\"postgres://\"):\n    DATABASE_URL = DATABASE_URL.replace(\"postgres://\", \"postgresql://\", 1)\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Create all tables\nBase.metadata.create_all(bind=engine)\n\n# FastAPI app initialization\napp = FastAPI(title=\"Posterly\", description=\"AI-Powered Poster Generator\")\n\n# Static files and templates\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\n# Dependency to get database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# JWT token functions\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef verify_token(token: str):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            return None\n        return username\n    except JWTError:\n        return None\n\n# Get current user from JWT token in cookie\ndef get_current_user(request: Request, db: Session = Depends(get_db)) -> Optional[User]:\n    token = request.cookies.get(\"access_token\")\n    if not token:\n        return None\n    \n    username = verify_token(token)\n    if username is None:\n        return None\n    \n    user = db.query(User).filter(User.username == username).first()\n    return user\n\n# Authentication decorator\ndef require_auth(db: Session = Depends(get_db)):\n    def decorator(request: Request):\n        user = get_current_user(request, db)\n        if not user:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Not authenticated\")\n        return user\n    return decorator\n\n# MASTER ADMIN AUTHENTICATION SYSTEM\n# This function handles the hardcoded master admin login\ndef authenticate_master_admin(username: str, password: str) -> bool:\n    \"\"\"\n    MASTER ADMIN LOGIN - For internal testing and admin access\n    Credentials: admin@posterly.ai / MasterKey#2025\n    This bypasses all usage limits and provides unlimited access\n    \"\"\"\n    MASTER_USERNAME = \"admin@posterly.ai\"\n    MASTER_PASSWORD = \"MasterKey#2025\"\n    \n    return username == MASTER_USERNAME and password == MASTER_PASSWORD\n\ndef get_or_create_master_admin(db: Session) -> User:\n    \"\"\"\n    Get or create the master admin user in the database\n    This user is flagged as is_master_admin=True and has unlimited access\n    \"\"\"\n    MASTER_EMAIL = \"admin@posterly.ai\"\n    MASTER_USERNAME = \"posterly_admin\"\n    \n    # Check if master admin already exists\n    master_user = db.query(User).filter(User.email == MASTER_EMAIL).first()\n    \n    if not master_user:\n        # Create master admin user\n        master_user = User(\n            username=MASTER_USERNAME,\n            email=MASTER_EMAIL,\n            full_name=\"Master Administrator\",\n            business_name=\"Posterly Internal\",\n            is_premium=True,\n            is_master_admin=True,  # This is the key flag for unlimited access\n            profile_completed=True\n        )\n        master_user.set_password(\"MasterKey#2025\")\n        db.add(master_user)\n        db.commit()\n        db.refresh(master_user)\n        logging.info(\"Created master admin user for internal testing\")\n    \n    return master_user\n\n# Authentication endpoint with master admin support\n@app.post(\"/login\")\nasync def login(\n    request: Request,\n    username: str = Form(...),\n    password: str = Form(...),\n    db: Session = Depends(get_db)\n):\n    # Check if this is a master admin login attempt\n    if authenticate_master_admin(username, password):\n        # Get or create master admin user\n        user = get_or_create_master_admin(db)\n        \n        # Create access token\n        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n        access_token = create_access_token(\n            data={\"sub\": user.username}, expires_delta=access_token_expires\n        )\n        \n        # Create response and set cookie\n        response = RedirectResponse(url=\"/dashboard\", status_code=302)\n        response.set_cookie(\n            key=\"access_token\",\n            value=access_token,\n            httponly=True,\n            max_age=ACCESS_TOKEN_EXPIRE_MINUTES * 60,\n            secure=False  # Set to True in production with HTTPS\n        )\n        \n        logging.info(f\"Master admin logged in successfully: {user.email}\")\n        return response\n    \n    # Regular user authentication\n    user = db.query(User).filter(User.username == username).first()\n    if not user or not user.verify_password(password):\n        raise HTTPException(status_code=400, detail=\"Invalid credentials\")\n    \n    # Create access token for regular user\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    \n    # Create response and set cookie\n    response = RedirectResponse(url=\"/profile\" if not user.profile_completed else \"/dashboard\", status_code=302)\n    response.set_cookie(\n        key=\"access_token\",\n        value=access_token,\n        httponly=True,\n        max_age=ACCESS_TOKEN_EXPIRE_MINUTES * 60,\n        secure=False  # Set to True in production with HTTPS\n    )\n    \n    return response\n\n# Dashboard with admin features\n@app.get(\"/dashboard\", response_class=HTMLResponse)\nasync def dashboard(request: Request, db: Session = Depends(get_db)):\n    user = get_current_user(request, db)\n    if not user:\n        return RedirectResponse(url=\"/\", status_code=302)\n    \n    # Get poster statistics\n    total_posters = db.query(Poster).filter(Poster.user_id == user.id).count()\n    recent_posters = db.query(Poster).filter(Poster.user_id == user.id).order_by(desc(Poster.created_at)).limit(4).all()\n    \n    # Calculate weekly activity (last 7 days)\n    week_ago = datetime.utcnow() - timedelta(days=7)\n    weekly_posters = db.query(Poster).filter(\n        Poster.user_id == user.id,\n        Poster.created_at >= week_ago\n    ).count()\n    \n    # Admin dashboard features for master admin\n    admin_stats = {}\n    if user.is_master_admin:\n        admin_stats = {\n            'total_users': db.query(User).filter(User.is_master_admin.is_(False)).count(),\n            'total_all_posters': db.query(Poster).count(),\n            'premium_users': db.query(User).filter(User.is_premium.is_(True), User.is_master_admin.is_(False)).count()\n        }\n    \n    return templates.TemplateResponse(\"dashboard_fastapi.html\", {\n        \"request\": request,\n        \"user\": user,\n        \"total_posters\": total_posters,\n        \"recent_posters\": recent_posters,\n        \"weekly_posters\": weekly_posters,\n        \"is_admin\": user.is_master_admin,\n        \"admin_stats\": admin_stats\n    })\n\n# Routes that respect unlimited access for master admin\n@app.get(\"/poster/generate\", response_class=HTMLResponse)\nasync def generate_poster_form(request: Request, db: Session = Depends(get_db)):\n    user = get_current_user(request, db)\n    if not user:\n        return RedirectResponse(url=\"/\", status_code=302)\n    \n    # Check usage limits (master admin bypasses this)\n    if not (user.is_premium or user.is_master_admin):\n        poster_count = db.query(Poster).filter(Poster.user_id == user.id).count()\n        if poster_count >= 3:  # Free user limit\n            return templates.TemplateResponse(\"upgrade_required.html\", {\"request\": request, \"user\": user})\n    \n    return templates.TemplateResponse(\"poster_generator.html\", {\"request\": request, \"user\": user})\n\n# Import remaining routes from the original application\nfrom gemini_service import generate_poster_image\n\n@app.post(\"/poster/generate\")\nasync def generate_poster(\n    request: Request,\n    title: str = Form(...),\n    prompt: str = Form(...),\n    profile_fields: list = Form([]),\n    db: Session = Depends(get_db)\n):\n    user = get_current_user(request, db)\n    if not user:\n        raise HTTPException(status_code=401, detail=\"Not authenticated\")\n    \n    # Master admin bypasses usage limits\n    if not (user.is_premium or user.is_master_admin):\n        poster_count = db.query(Poster).filter(Poster.user_id == user.id).count()\n        if poster_count >= 3:\n            raise HTTPException(status_code=403, detail=\"Usage limit reached\")\n    \n    try:\n        # Generate unique filename\n        unique_filename = f\"poster_{uuid.uuid4()}.png\"\n        file_path = f\"static/uploads/posters/{unique_filename}\"\n        \n        # Create directories if they don't exist\n        os.makedirs(\"static/uploads/posters\", exist_ok=True)\n        \n        # Generate poster using Gemini API\n        success = generate_poster_image(prompt, file_path)\n        if not success:\n            raise HTTPException(status_code=500, detail=\"Failed to generate poster\")\n        \n        # Apply watermark for free users (master admin gets watermark-free)\n        # TODO: Implement watermark and profile overlay functions\n        \n        # Save poster to database\n        poster = Poster(\n            title=title,\n            prompt=prompt,\n            filename=unique_filename,\n            displayed_fields=json.dumps(profile_fields) if profile_fields else None,\n            user_id=user.id,\n            has_watermark=not (user.is_premium or user.is_master_admin),\n            is_public=False\n        )\n        \n        db.add(poster)\n        db.commit()\n        \n        return RedirectResponse(url=f\"/poster/view/{poster.id}\", status_code=302)\n        \n    except Exception as e:\n        logging.error(f\"Error generating poster: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Failed to generate poster\")\n\n# Other essential routes\n@app.get(\"/\", response_class=HTMLResponse)\nasync def home(request: Request, db: Session = Depends(get_db)):\n    user = get_current_user(request, db)\n    if user:\n        return RedirectResponse(url=\"/dashboard\", status_code=302)\n    return templates.TemplateResponse(\"login.html\", {\"request\": request})\n\n@app.get(\"/logout\")\nasync def logout():\n    response = RedirectResponse(url=\"/\", status_code=302)\n    response.delete_cookie(\"access_token\")\n    return response\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=5000)","size_bytes":11599},"stripe_service.py":{"content":"import os\nimport stripe\nimport logging\nfrom flask import current_app\n\n# Configure Stripe\nstripe.api_key = os.environ.get('STRIPE_SECRET_KEY')\n\n# Get domain for redirect URLs\ndef get_domain():\n    if os.environ.get('REPLIT_DEPLOYMENT'):\n        return os.environ.get('REPLIT_DEV_DOMAIN')\n    else:\n        domains = os.environ.get('REPLIT_DOMAINS', 'localhost:5000')\n        return domains.split(',')[0]\n\nclass StripeService:\n    \"\"\"Service class for handling Stripe operations\"\"\"\n    \n    # Subscription plans\n    PLANS = {\n        'free': {\n            'name': 'Free Plan',\n            'price': 0,\n            'features': ['5 posters per month', 'Watermarked downloads', 'Basic templates'],\n            'stripe_price_id': None\n        },\n        'pro': {\n            'name': 'Pro Plan',\n            'price': 9.99,\n            'features': ['Unlimited posters', 'Watermark-free downloads', 'Premium templates', 'High-res exports'],\n            'stripe_price_id': 'price_1QKoMxEm0cDh9i3v9xQzLmRr'  # Replace with your actual price ID\n        },\n        'premium': {\n            'name': 'Premium Plan', \n            'price': 19.99,\n            'features': ['Everything in Pro', 'Priority support', 'Advanced AI features', 'Custom branding'],\n            'stripe_price_id': 'price_1QKoNREm0cDh9i3vYxQzLmRs'  # Replace with your actual price ID\n        }\n    }\n    \n    @staticmethod\n    def create_checkout_session(plan_id, user_id, success_url=None, cancel_url=None):\n        \"\"\"Create a Stripe checkout session for subscription\"\"\"\n        try:\n            if plan_id not in StripeService.PLANS:\n                raise ValueError(f\"Invalid plan: {plan_id}\")\n            \n            plan = StripeService.PLANS[plan_id]\n            if not plan['stripe_price_id']:\n                raise ValueError(f\"No Stripe price ID for plan: {plan_id}\")\n            \n            domain = get_domain()\n            if not success_url:\n                success_url = f\"https://{domain}/payment/success\"\n            if not cancel_url:\n                cancel_url = f\"https://{domain}/payment/cancel\"\n            \n            session = stripe.checkout.Session.create(\n                payment_method_types=['card'],\n                line_items=[{\n                    'price': plan['stripe_price_id'],\n                    'quantity': 1,\n                }],\n                mode='subscription',\n                success_url=success_url + '?session_id={CHECKOUT_SESSION_ID}',\n                cancel_url=cancel_url,\n                metadata={\n                    'user_id': str(user_id),\n                    'plan_id': plan_id\n                },\n                automatic_tax={'enabled': True},\n                billing_address_collection='required',\n            )\n            \n            return session\n            \n        except Exception as e:\n            logging.error(f\"Error creating checkout session: {str(e)}\")\n            raise e\n    \n    @staticmethod\n    def create_customer_portal_session(customer_id, return_url=None):\n        \"\"\"Create a Stripe customer portal session\"\"\"\n        try:\n            domain = get_domain()\n            if not return_url:\n                return_url = f\"https://{domain}/profile\"\n            \n            session = stripe.billing_portal.Session.create(\n                customer=customer_id,\n                return_url=return_url,\n            )\n            \n            return session\n            \n        except Exception as e:\n            logging.error(f\"Error creating portal session: {str(e)}\")\n            raise e\n    \n    @staticmethod\n    def get_subscription_status(customer_id):\n        \"\"\"Get subscription status for a customer\"\"\"\n        try:\n            subscriptions = stripe.Subscription.list(\n                customer=customer_id,\n                status='active',\n                limit=1\n            )\n            \n            if subscriptions.data:\n                subscription = subscriptions.data[0]\n                return {\n                    'active': True,\n                    'plan_id': subscription.metadata.get('plan_id', 'unknown'),\n                    'status': subscription.status\n                }\n            else:\n                return {'active': False}\n                \n        except Exception as e:\n            logging.error(f\"Error getting subscription status: {str(e)}\")\n            return {'active': False}\n    \n    @staticmethod\n    def handle_webhook(payload, sig_header):\n        \"\"\"Handle Stripe webhook events\"\"\"\n        try:\n            # Verify webhook signature\n            endpoint_secret = os.environ.get('STRIPE_WEBHOOK_SECRET')\n            if endpoint_secret:\n                event = stripe.Webhook.construct_event(\n                    payload, sig_header, endpoint_secret\n                )\n            else:\n                # For development, skip signature verification\n                import json\n                event = json.loads(payload)\n            \n            # Handle different event types\n            if event['type'] == 'checkout.session.completed':\n                session = event['data']['object']\n                return StripeService._handle_successful_payment(session)\n            \n            elif event['type'] == 'customer.subscription.updated':\n                subscription = event['data']['object']\n                return StripeService._handle_subscription_update(subscription)\n            \n            elif event['type'] == 'customer.subscription.deleted':\n                subscription = event['data']['object']\n                return StripeService._handle_subscription_cancellation(subscription)\n            \n            return {'status': 'success'}\n            \n        except Exception as e:\n            logging.error(f\"Webhook error: {str(e)}\")\n            return {'status': 'error', 'message': str(e)}\n    \n    @staticmethod\n    def _handle_successful_payment(session):\n        \"\"\"Handle successful payment completion\"\"\"\n        try:\n            from models import User, Subscription\n            from app import db\n            \n            user_id = session['metadata']['user_id']\n            plan_id = session['metadata']['plan_id']\n            customer_id = session['customer']\n            subscription_id = session['subscription']\n            \n            # Update user subscription in database\n            user = User.query.get(user_id)\n            if user:\n                # Create or update subscription record\n                subscription = Subscription.query.filter_by(user_id=user_id).first()\n                if not subscription:\n                    subscription = Subscription()\n                    subscription.user_id = user_id\n                    db.session.add(subscription)\n                \n                subscription.stripe_customer_id = customer_id\n                subscription.stripe_subscription_id = subscription_id\n                subscription.plan_id = plan_id\n                subscription.status = 'active'\n                \n                db.session.commit()\n                logging.info(f\"Updated subscription for user {user_id} to {plan_id}\")\n            \n            return {'status': 'success'}\n            \n        except Exception as e:\n            logging.error(f\"Error handling successful payment: {str(e)}\")\n            return {'status': 'error', 'message': str(e)}\n    \n    @staticmethod\n    def _handle_subscription_update(subscription_data):\n        \"\"\"Handle subscription updates\"\"\"\n        try:\n            from models import Subscription\n            from app import db\n            \n            customer_id = subscription_data['customer']\n            status = subscription_data['status']\n            \n            # Find subscription by customer ID\n            subscription = Subscription.query.filter_by(\n                stripe_customer_id=customer_id\n            ).first()\n            \n            if subscription:\n                subscription.status = status\n                db.session.commit()\n                logging.info(f\"Updated subscription status to {status}\")\n            \n            return {'status': 'success'}\n            \n        except Exception as e:\n            logging.error(f\"Error handling subscription update: {str(e)}\")\n            return {'status': 'error', 'message': str(e)}\n    \n    @staticmethod\n    def _handle_subscription_cancellation(subscription_data):\n        \"\"\"Handle subscription cancellation\"\"\"\n        try:\n            from models import Subscription\n            from app import db\n            \n            customer_id = subscription_data['customer']\n            \n            # Find subscription by customer ID\n            subscription = Subscription.query.filter_by(\n                stripe_customer_id=customer_id\n            ).first()\n            \n            if subscription:\n                subscription.status = 'cancelled'\n                subscription.plan_id = 'free'  # Downgrade to free\n                db.session.commit()\n                logging.info(f\"Cancelled subscription for customer {customer_id}\")\n            \n            return {'status': 'success'}\n            \n        except Exception as e:\n            logging.error(f\"Error handling subscription cancellation: {str(e)}\")\n            return {'status': 'error', 'message': str(e)}","size_bytes":9215},"stripe_service_fastapi.py":{"content":"import os\nimport stripe\nimport logging\nfrom fastapi import Request\nfrom datetime import datetime\n\n# Initialize Stripe\nstripe.api_key = os.environ.get('STRIPE_SECRET_KEY')\n\ndef get_domain():\n    \"\"\"Get the current domain for Stripe redirects\"\"\"\n    if os.environ.get('REPLIT_DEPLOYMENT'):\n        return os.environ.get('REPLIT_DEV_DOMAIN')\n    else:\n        domains = os.environ.get('REPLIT_DOMAINS', 'localhost:5000')\n        return domains.split(',')[0]\n\ndef create_checkout_session(user_id, price_id='price_premium_monthly'):\n    \"\"\"\n    Create a Stripe checkout session for subscription\n    \n    Args:\n        user_id (int): User ID for the subscription\n        price_id (str): Stripe price ID for the subscription\n        \n    Returns:\n        str: Checkout session URL or None if failed\n    \"\"\"\n    try:\n        domain = get_domain()\n        \n        checkout_session = stripe.checkout.Session.create(\n            line_items=[\n                {\n                    'price': price_id,\n                    'quantity': 1,\n                },\n            ],\n            mode='subscription',\n            success_url=f'https://{domain}/subscription/success?session_id={{CHECKOUT_SESSION_ID}}',\n            cancel_url=f'https://{domain}/subscription/cancel',\n            client_reference_id=str(user_id),\n            allow_promotion_codes=True,\n            billing_address_collection='required',\n        )\n        \n        return checkout_session.url\n        \n    except Exception as e:\n        logging.error(f\"Error creating Stripe checkout session: {str(e)}\")\n        return None\n\ndef create_customer_portal_session(customer_id):\n    \"\"\"\n    Create a Stripe customer portal session\n    \n    Args:\n        customer_id (str): Stripe customer ID\n        \n    Returns:\n        str: Customer portal URL or None if failed\n    \"\"\"\n    try:\n        domain = get_domain()\n        \n        portal_session = stripe.billing_portal.Session.create(\n            customer=customer_id,\n            return_url=f'https://{domain}/subscription',\n        )\n        \n        return portal_session.url\n        \n    except Exception as e:\n        logging.error(f\"Error creating Stripe customer portal session: {str(e)}\")\n        return None\n\ndef handle_webhook(request_data, signature, db_session):\n    \"\"\"\n    Handle Stripe webhook events\n    \n    Args:\n        request_data (bytes): Raw request data\n        signature (str): Stripe signature header\n        db_session: Database session\n        \n    Returns:\n        dict: Response data\n    \"\"\"\n    endpoint_secret = os.environ.get('STRIPE_WEBHOOK_SECRET')\n    \n    try:\n        event = stripe.Webhook.construct_event(\n            request_data, signature, endpoint_secret\n        )\n    except ValueError as e:\n        logging.error(f\"Invalid payload: {e}\")\n        return {\"error\": \"Invalid payload\"}\n    except stripe.error.SignatureVerificationError as e:\n        logging.error(f\"Invalid signature: {e}\")\n        return {\"error\": \"Invalid signature\"}\n\n    # Import here to avoid circular imports\n    from models_fastapi import User, Subscription\n\n    # Handle the event\n    if event['type'] == 'checkout.session.completed':\n        session = event['data']['object']\n        \n        # Get user ID from client_reference_id\n        user_id = int(session.get('client_reference_id'))\n        customer_id = session.get('customer')\n        subscription_id = session.get('subscription')\n        \n        # Update user's premium status and stripe customer ID\n        user = db_session.query(User).filter(User.id == user_id).first()\n        if user:\n            user.is_premium = True\n            user.stripe_customer_id = customer_id\n            \n            # Create subscription record\n            subscription = Subscription(\n                user_id=user_id,\n                stripe_subscription_id=subscription_id,\n                stripe_customer_id=customer_id,\n                status='active',\n                created_at=datetime.utcnow()\n            )\n            db_session.add(subscription)\n            db_session.commit()\n            \n        logging.info(f\"Checkout completed for user {user_id}\")\n        \n    elif event['type'] == 'invoice.payment_succeeded':\n        invoice = event['data']['object']\n        subscription_id = invoice.get('subscription')\n        \n        # Update subscription status\n        subscription = db_session.query(Subscription).filter(\n            Subscription.stripe_subscription_id == subscription_id\n        ).first()\n        \n        if subscription:\n            subscription.status = 'active'\n            subscription.current_period_start = datetime.fromtimestamp(\n                invoice.get('period_start')\n            )\n            subscription.current_period_end = datetime.fromtimestamp(\n                invoice.get('period_end')\n            )\n            subscription.updated_at = datetime.utcnow()\n            \n            # Update user's premium status\n            user = db_session.query(User).filter(User.id == subscription.user_id).first()\n            if user:\n                user.is_premium = True\n            \n            db_session.commit()\n            \n        logging.info(f\"Payment succeeded for subscription {subscription_id}\")\n        \n    elif event['type'] == 'customer.subscription.deleted':\n        subscription_data = event['data']['object']\n        subscription_id = subscription_data.get('id')\n        \n        # Update subscription status\n        subscription = db_session.query(Subscription).filter(\n            Subscription.stripe_subscription_id == subscription_id\n        ).first()\n        \n        if subscription:\n            subscription.status = 'canceled'\n            subscription.updated_at = datetime.utcnow()\n            \n            # Update user's premium status\n            user = db_session.query(User).filter(User.id == subscription.user_id).first()\n            if user:\n                user.is_premium = False\n            \n            db_session.commit()\n            \n        logging.info(f\"Subscription canceled: {subscription_id}\")\n        \n    else:\n        logging.info(f\"Unhandled event type: {event['type']}\")\n    \n    return {\"status\": \"success\"}\n\ndef get_subscription_status(user_id, db_session):\n    \"\"\"\n    Get subscription status for a user\n    \n    Args:\n        user_id (int): User ID\n        db_session: Database session\n        \n    Returns:\n        dict: Subscription status information\n    \"\"\"\n    from models_fastapi import Subscription\n    \n    subscription = db_session.query(Subscription).filter(\n        Subscription.user_id == user_id,\n        Subscription.status == 'active'\n    ).first()\n    \n    if subscription and subscription.is_active():\n        return {\n            'is_active': True,\n            'status': subscription.status,\n            'current_period_end': subscription.current_period_end,\n            'customer_id': subscription.stripe_customer_id\n        }\n    \n    return {\n        'is_active': False,\n        'status': 'inactive',\n        'current_period_end': None,\n        'customer_id': None\n    }","size_bytes":7050},"static/css/style.css":{"content":"/* Custom CSS for Posterly */\n\n:root {\n    --primary-color: #4f46e5;\n    --secondary-color: #6b7280;\n    --success-color: #10b981;\n    --warning-color: #f59e0b;\n    --danger-color: #ef4444;\n    --dark-bg: #1f2937;\n    --card-bg: #374151;\n}\n\n/* General Styles */\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    line-height: 1.6;\n}\n\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.5rem;\n}\n\n/* Card Enhancements */\n.card {\n    border: none;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n/* Button Enhancements */\n.btn {\n    border-radius: 8px;\n    font-weight: 500;\n    transition: all 0.2s ease;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    border: none;\n}\n\n.btn-primary:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);\n}\n\n/* Form Enhancements */\n.form-control {\n    border-radius: 8px;\n    border: 2px solid #e5e7eb;\n    transition: all 0.2s ease;\n}\n\n.form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);\n}\n\n/* Poster Cards */\n.poster-card {\n    transition: all 0.3s ease;\n    cursor: pointer;\n    border-radius: 12px;\n    overflow: hidden;\n}\n\n.poster-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.poster-thumbnail {\n    height: 200px;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.poster-card:hover .poster-thumbnail {\n    transform: scale(1.05);\n}\n\n/* Loading States */\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n/* Character Counter */\n.character-counter {\n    font-size: 0.875rem;\n    margin-top: 0.25rem;\n}\n\n/* Image Preview */\n.image-preview {\n    margin-top: 0.5rem;\n}\n\n.image-preview img {\n    border-radius: 8px;\n}\n\n/* Alert Enhancements */\n.alert {\n    border-radius: 8px;\n    border: none;\n}\n\n.alert-info {\n    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);\n    color: #1e40af;\n}\n\n.alert-success {\n    background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);\n    color: #065f46;\n}\n\n.alert-warning {\n    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);\n    color: #92400e;\n}\n\n.alert-danger {\n    background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);\n    color: #991b1b;\n}\n\n/* Navigation */\n.navbar {\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n/* Footer */\nfooter {\n    margin-top: auto;\n}\n\n/* Responsive Images */\n.img-fluid {\n    border-radius: 8px;\n}\n\n/* Badge Enhancements */\n.badge {\n    font-weight: 500;\n    border-radius: 6px;\n}\n\n/* Dropdown Enhancements */\n.dropdown-menu {\n    border: none;\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    border-radius: 8px;\n}\n\n.dropdown-item {\n    transition: all 0.2s ease;\n}\n\n.dropdown-item:hover {\n    background-color: var(--primary-color);\n    color: white;\n}\n\n/* Profile Setup Form */\n.profile-form .form-group {\n    margin-bottom: 1.5rem;\n}\n\n/* Poster Generation Form */\n.poster-form {\n    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n    border-radius: 12px;\n    padding: 2rem;\n}\n\n/* Gallery Grid */\n.gallery-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 1.5rem;\n}\n\n/* Empty State */\n.empty-state {\n    text-align: center;\n    padding: 3rem 1rem;\n}\n\n.empty-state i {\n    opacity: 0.5;\n    margin-bottom: 1rem;\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in {\n    animation: fadeIn 0.5s ease-out;\n}\n\n/* Dark Mode Specific Adjustments */\n[data-bs-theme=\"dark\"] .poster-form {\n    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);\n}\n\n[data-bs-theme=\"dark\"] .card {\n    background-color: var(--card-bg);\n}\n\n[data-bs-theme=\"dark\"] .form-control {\n    background-color: #4b5563;\n    border-color: #6b7280;\n    color: white;\n}\n\n[data-bs-theme=\"dark\"] .form-control:focus {\n    background-color: #4b5563;\n    border-color: var(--primary-color);\n    color: white;\n}\n\n/* Toast Container */\n.toast-container {\n    z-index: 1060;\n}\n\n.toast {\n    border-radius: 8px;\n    border: none;\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n/* Utility Classes */\n.text-gradient {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.shadow-custom {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.shadow-custom-lg {\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .poster-form {\n        padding: 1rem;\n    }\n    \n    .gallery-grid {\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 1rem;\n    }\n    \n    .navbar-brand {\n        font-size: 1.25rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .gallery-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .container {\n        padding-left: 0.75rem;\n        padding-right: 0.75rem;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .footer,\n    .btn,\n    .alert {\n        display: none !important;\n    }\n    \n    .container {\n        max-width: none !important;\n        padding: 0 !important;\n    }\n    \n    .card {\n        box-shadow: none !important;\n        border: 1px solid #dee2e6 !important;\n    }\n}","size_bytes":5892},"static/js/main.js":{"content":"// Main JavaScript file for Posterly\n\n// Initialize Bootstrap components when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n\n    // Initialize popovers\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    popoverTriggerList.map(function (popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n\n    // Auto-hide alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n    alerts.forEach(function(alert) {\n        setTimeout(function() {\n            const bsAlert = new bootstrap.Alert(alert);\n            if (bsAlert) {\n                bsAlert.close();\n            }\n        }, 5000);\n    });\n\n    // Initialize poster card animations\n    initializePosterCards();\n    \n    // Initialize form enhancements\n    initializeFormEnhancements();\n    \n    // Initialize image preview functionality\n    initializeImagePreviews();\n});\n\n// Poster card hover effects and interactions\nfunction initializePosterCards() {\n    const posterCards = document.querySelectorAll('.poster-card');\n    \n    posterCards.forEach(card => {\n        // Add hover effects\n        card.addEventListener('mouseenter', function() {\n            this.classList.add('shadow-lg');\n        });\n        \n        card.addEventListener('mouseleave', function() {\n            this.classList.remove('shadow-lg');\n        });\n        \n        // Add click to view functionality\n        const viewBtn = card.querySelector('a[href*=\"/poster/\"]');\n        if (viewBtn && !card.querySelector('.poster-overlay')) {\n            card.style.cursor = 'pointer';\n            card.addEventListener('click', function(e) {\n                if (e.target === this || e.target.classList.contains('poster-thumbnail')) {\n                    window.location.href = viewBtn.href;\n                }\n            });\n        }\n    });\n}\n\n// Form enhancement functions\nfunction initializeFormEnhancements() {\n    // Character counters for textareas\n    const textareas = document.querySelectorAll('textarea[maxlength]');\n    textareas.forEach(textarea => {\n        const maxLength = textarea.getAttribute('maxlength');\n        if (maxLength) {\n            addCharacterCounter(textarea, maxLength);\n        }\n    });\n    \n    // Form validation feedback\n    const forms = document.querySelectorAll('form');\n    forms.forEach(form => {\n        form.addEventListener('submit', function(e) {\n            if (!form.checkValidity()) {\n                e.preventDefault();\n                e.stopPropagation();\n                \n                // Focus first invalid field\n                const firstInvalid = form.querySelector(':invalid');\n                if (firstInvalid) {\n                    firstInvalid.focus();\n                }\n            }\n            form.classList.add('was-validated');\n        });\n    });\n    \n    // File input enhancements\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n    fileInputs.forEach(input => {\n        input.addEventListener('change', function() {\n            const fileName = this.files[0]?.name;\n            const label = this.parentNode.querySelector('.form-label');\n            if (fileName && label) {\n                label.textContent = `${label.textContent.split(' (')[0]} (${fileName})`;\n            }\n        });\n    });\n}\n\n// Add character counter to textarea\nfunction addCharacterCounter(textarea, maxLength) {\n    const counter = document.createElement('div');\n    counter.className = 'character-counter text-muted small text-end mt-1';\n    counter.innerHTML = `<span class=\"current\">0</span>/${maxLength} characters`;\n    \n    textarea.parentNode.appendChild(counter);\n    \n    const currentSpan = counter.querySelector('.current');\n    \n    function updateCounter() {\n        const currentLength = textarea.value.length;\n        currentSpan.textContent = currentLength;\n        \n        if (currentLength > maxLength * 0.9) {\n            counter.classList.add('text-warning');\n            counter.classList.remove('text-muted');\n        } else if (currentLength > maxLength) {\n            counter.classList.add('text-danger');\n            counter.classList.remove('text-warning', 'text-muted');\n        } else {\n            counter.classList.add('text-muted');\n            counter.classList.remove('text-warning', 'text-danger');\n        }\n    }\n    \n    textarea.addEventListener('input', updateCounter);\n    textarea.addEventListener('paste', () => setTimeout(updateCounter, 10));\n    updateCounter(); // Initial count\n}\n\n// Image preview functionality\nfunction initializeImagePreviews() {\n    const imageInputs = document.querySelectorAll('input[type=\"file\"][accept*=\"image\"]');\n    \n    imageInputs.forEach(input => {\n        input.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            if (file && file.type.startsWith('image/')) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    showImagePreview(input, e.target.result);\n                };\n                reader.readAsDataURL(file);\n            }\n        });\n    });\n}\n\n// Show image preview\nfunction showImagePreview(input, src) {\n    let preview = input.parentNode.querySelector('.image-preview');\n    \n    if (!preview) {\n        preview = document.createElement('div');\n        preview.className = 'image-preview mt-2';\n        input.parentNode.appendChild(preview);\n    }\n    \n    preview.innerHTML = `\n        <img src=\"${src}\" alt=\"Preview\" class=\"img-thumbnail\" style=\"max-height: 150px;\">\n        <button type=\"button\" class=\"btn btn-sm btn-outline-danger ms-2\" onclick=\"removeImagePreview(this)\">\n            <i class=\"fas fa-times\"></i>\n        </button>\n    `;\n}\n\n// Remove image preview\nfunction removeImagePreview(button) {\n    const preview = button.parentNode;\n    const input = preview.parentNode.querySelector('input[type=\"file\"]');\n    input.value = '';\n    preview.remove();\n}\n\n// Utility functions\nconst Utils = {\n    // Debounce function for search inputs\n    debounce: function(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    },\n    \n    // Format file size\n    formatFileSize: function(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    \n    // Show loading state\n    showLoading: function(element, text = 'Loading...') {\n        const originalHTML = element.innerHTML;\n        element.dataset.originalHTML = originalHTML;\n        element.innerHTML = `\n            <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n            ${text}\n        `;\n        element.disabled = true;\n    },\n    \n    // Hide loading state\n    hideLoading: function(element) {\n        if (element.dataset.originalHTML) {\n            element.innerHTML = element.dataset.originalHTML;\n            delete element.dataset.originalHTML;\n        }\n        element.disabled = false;\n    },\n    \n    // Show toast notification\n    showToast: function(message, type = 'success', duration = 5000) {\n        // Create toast container if it doesn't exist\n        let container = document.querySelector('.toast-container');\n        if (!container) {\n            container = document.createElement('div');\n            container.className = 'toast-container position-fixed bottom-0 end-0 p-3';\n            document.body.appendChild(container);\n        }\n        \n        // Create toast element\n        const toastId = 'toast-' + Date.now();\n        const iconClass = type === 'success' ? 'fa-check-circle text-success' : 'fa-exclamation-circle text-danger';\n        const title = type === 'success' ? 'Success' : 'Error';\n        \n        const toastHTML = `\n            <div id=\"${toastId}\" class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n                <div class=\"toast-header\">\n                    <i class=\"fas ${iconClass} me-2\"></i>\n                    <strong class=\"me-auto\">${title}</strong>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"toast-body\">\n                    ${message}\n                </div>\n            </div>\n        `;\n        \n        container.insertAdjacentHTML('beforeend', toastHTML);\n        \n        // Show toast\n        const toastElement = document.getElementById(toastId);\n        const toast = new bootstrap.Toast(toastElement, { delay: duration });\n        toast.show();\n        \n        // Remove from DOM after hiding\n        toastElement.addEventListener('hidden.bs.toast', function() {\n            this.remove();\n        });\n    },\n    \n    // Copy text to clipboard\n    copyToClipboard: function(text) {\n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(text).then(() => {\n                this.showToast('Copied to clipboard!');\n            }).catch(() => {\n                this.fallbackCopyToClipboard(text);\n            });\n        } else {\n            this.fallbackCopyToClipboard(text);\n        }\n    },\n    \n    // Fallback copy method for older browsers\n    fallbackCopyToClipboard: function(text) {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        try {\n            const successful = document.execCommand('copy');\n            if (successful) {\n                this.showToast('Copied to clipboard!');\n            } else {\n                this.showToast('Failed to copy text', 'error');\n            }\n        } catch (err) {\n            this.showToast('Failed to copy text', 'error');\n        }\n        \n        document.body.removeChild(textArea);\n    }\n};\n\n// Search functionality for gallery pages\nfunction initializeSearch() {\n    const searchInput = document.getElementById('searchInput');\n    const filterSelect = document.getElementById('filterSelect');\n    const sortSelect = document.getElementById('sortSelect');\n    \n    if (searchInput || filterSelect || sortSelect) {\n        const debouncedSearch = Utils.debounce(performSearch, 300);\n        \n        if (searchInput) searchInput.addEventListener('input', debouncedSearch);\n        if (filterSelect) filterSelect.addEventListener('change', performSearch);\n        if (sortSelect) sortSelect.addEventListener('change', performSearch);\n    }\n}\n\n// Perform search and filtering\nfunction performSearch() {\n    const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';\n    const filterValue = document.getElementById('filterSelect')?.value || 'all';\n    const sortValue = document.getElementById('sortSelect')?.value || 'newest';\n    \n    const items = document.querySelectorAll('.poster-item');\n    let visibleItems = [];\n    \n    items.forEach(item => {\n        const title = item.dataset.title || '';\n        const isPublic = item.dataset.public === 'true';\n        const date = new Date(item.dataset.date || 0);\n        \n        // Apply search filter\n        const matchesSearch = title.includes(searchTerm);\n        \n        // Apply visibility filter\n        let matchesFilter = true;\n        if (filterValue === 'public') matchesFilter = isPublic;\n        if (filterValue === 'private') matchesFilter = !isPublic;\n        \n        if (matchesSearch && matchesFilter) {\n            visibleItems.push({ element: item, date: date, title: title });\n            item.style.display = 'block';\n        } else {\n            item.style.display = 'none';\n        }\n    });\n    \n    // Sort visible items\n    visibleItems.sort((a, b) => {\n        switch (sortValue) {\n            case 'oldest':\n                return a.date - b.date;\n            case 'title':\n                return a.title.localeCompare(b.title);\n            case 'newest':\n            default:\n                return b.date - a.date;\n        }\n    });\n    \n    // Reorder DOM elements\n    const container = document.getElementById('posterGrid');\n    if (container) {\n        visibleItems.forEach(item => {\n            container.appendChild(item.element);\n        });\n    }\n    \n    // Show/hide empty state\n    const emptyState = document.getElementById('emptyState');\n    if (emptyState) {\n        emptyState.style.display = visibleItems.length === 0 ? 'block' : 'none';\n    }\n}\n\n// Initialize search when DOM is ready\ndocument.addEventListener('DOMContentLoaded', initializeSearch);\n\n// Poster generation form enhancements\ndocument.addEventListener('DOMContentLoaded', function() {\n    const posterForm = document.getElementById('posterForm');\n    if (posterForm) {\n        posterForm.addEventListener('submit', function(e) {\n            const submitBtn = posterForm.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n                Utils.showLoading(submitBtn, 'Generating...');\n            }\n        });\n    }\n});\n\n// Export utilities for global use\nwindow.PosterlyUtils = Utils;\n","size_bytes":13851}}}